{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/components/LabelObjects.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/components/LabelObjects.vue","mtime":1638395687236},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/thread-loader/dist/cjs.js","mtime":1633407346686},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js","mtime":1633407348173},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["LabelObjects.vue"],"names":[],"mappingsfile":"LabelObjects.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <b-container fluid>\n    <b-col>\n      <b-row\n        align-h=\"center\"\n        class=\"my-1\"\n      >\n        <div class=\"wrapper\">\n          Confidence Threshold<br>\n          <input\n            type=\"range\"\n            value=\"90\"\n            min=\"55\"\n            max=\"99\"\n            step=\"1\"\n            @click=\"updateConfidence\"\n          >\n          {{ Confidence }}%<br>\n        </div>\n      </b-row>\n      <div v-if=\"lowerConfidence === true\">\n        {{ lowerConfidenceMessage }}\n      </div>\n      <div\n        v-if=\"isBusy\"\n        class=\"wrapper\"\n      >\n        <Loading />\n      </div>\n      <b-row\n        align-h=\"center\"\n        class=\"my-1\"\n      >\n        <div class=\"wrapper\">\n          <br>\n          <template v-for=\"label in sorted_unique_labels\">\n            <template v-if=\"boxes_available.includes(label[0])\">\n              <!-- Show darker button outline if boxes are available for the label -->\n              <b-button\n                v-b-tooltip.hover\n                variant=\"outline-dark\"\n                :title=\"label[1]\"\n                size=\"sm\"\n                pill\n                @click=\"updateMarkers(label[0])\"\n              >\n                {{ label[0]+\"*\" }}\n              </b-button> &nbsp;\n            </template>\n            <template v-else>\n              <b-button\n                v-b-tooltip.hover\n                variant=\"outline-secondary\"\n                :title=\"label[1]\"\n                size=\"sm\"\n                pill\n                @click=\"updateMarkers(label[0])\"\n              >\n                {{ label[0] }}\n              </b-button> &nbsp;\n            </template>\n          </template>\n        </div>\n      </b-row>\n      <b-row\n        align-h=\"center\"\n        class=\"my-1\"\n      >\n        <div\n          v-if=\"isBusy === false\"\n          class=\"wrapper\"\n        >\n          <p class=\"text-muted\">\n            ({{ count_labels }} identified objects, {{ count_distinct_labels }} unique)\n          </p>\n          <hr>\n          <p class=\"text-muted\">\n            * Indicates bounding boxes are available.\n          </p>\n        </div>\n      </b-row>\n    </b-col>\n    <b-button\n      type=\"button\"\n      @click=\"saveFile()\"\n    >\n      Download Data\n    </b-button>\n  </b-container>\n</template>\n\n<script>\n  import Loading from '@/components/Loading.vue'\n  import { mapState } from 'vuex'\n  export default {\n    name: \"LabelObjects\",\n    components: {\n      Loading\n    },\n    props: {\n      mediaType: {\n        type: String,\n        default: \"\"\n      },\n    },\n    data() {\n      return {\n        Confidence: 90,\n        high_confidence_data: [],\n        elasticsearch_data: [],\n        boxes_available: [],\n        count_distinct_labels: 0,\n        count_labels: 0,\n        isBusy: false,\n        operator: 'label_detection',\n        canvasRefreshInterval: undefined,\n        timeseries: new Map(),\n        selectedLabel: '',\n        lowerConfidence: false,\n        lowerConfidenceMessage: 'Try lowering confidence threshold',\n      }\n    },\n    computed: {\n      ...mapState(['player']),\n      sorted_unique_labels() {\n        // This function sorts and counts unique labels for mouse over events on label buttons\n        const es_data = this.elasticsearch_data;\n        const unique_labels = new Map();\n        // sort and count unique labels for label mouse over events\n        es_data.forEach(function (record) {\n          unique_labels.set(record.Name, unique_labels.get(record.Name) ? unique_labels.get(record.Name) + 1 : 1);\n          if (record.Instances.length > 0) {\n            // Save this label name to a list of labels that have bounding boxes\n            this.saveBoxedLabel(record.Name)\n          }\n        }.bind(this));\n        const sorted_unique_labels = new Map([...unique_labels.entries()].slice().sort((a, b) => b[1] - a[1]));\n        // If Elasticsearch returned undefined labels then delete them:\n        sorted_unique_labels.delete(undefined);\n        this.countLabels(sorted_unique_labels.size, es_data.length);\n        return sorted_unique_labels\n      },\n    },\n    watch: {\n      // These watches update the line chart\n      selectedLabel: function() {\n        this.chartData();\n      },\n      elasticsearch_data: function() {\n        this.chartData();\n      },\n    },\n    deactivated: function () {\n      console.log('deactivated component:', this.operator);\n      this.boxes_available = [];\n      this.selectedLabel = '';\n      clearInterval(this.canvasRefreshInterval);\n      const canvas = document.getElementById('canvas');\n      let ctx;\n      if (canvas) ctx = canvas.getContext('2d');\n      if (ctx) ctx.clearRect(0, 0, canvas.width, canvas.height);\n    },\n    activated: function () {\n      console.log('activated component:', this.operator)\n      this.fetchAssetData();\n    },\n    beforeDestroy: function () {\n      this.high_confidence_data = [];\n      this.elasticsearch_data = [];\n      this.count_distinct_labels = 0;\n      this.count_labels = 0;\n      clearInterval(this.canvasRefreshInterval);\n    },\n    methods: {\n      saveBoxedLabel(label_name){\n        if (!this.boxes_available.includes(label_name)) {\n          this.boxes_available.push(label_name);\n        }\n      },\n      countLabels(unique_count, total_count) {\n        this.count_distinct_labels = unique_count;\n        this.count_labels = total_count;\n      },\n      saveFile() {\n        const elasticsearch_data = JSON.stringify(this.elasticsearch_data);\n        const blob = new Blob([elasticsearch_data], {type: 'text/plain'});\n        const e = document.createEvent('MouseEvents'),\n          a = document.createElement('a');\n        a.download = \"data.json\";\n        a.href = window.URL.createObjectURL(blob);\n        a.dataset.downloadurl = ['text/json', a.download, a.href].join(':');\n        e.initEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        a.dispatchEvent(e);\n      },\n      updateConfidence (event) {\n        this.isBusy = true;\n        this.Confidence = event.target.value;\n        if (this.mediaType === \"video\") {\n          // redraw markers on video timeline\n          this.player.markers.removeAll();\n        }\n        this.fetchAssetData()\n      },\n      // updateMarkers updates markers in the video player and is called when someone clicks on a label button\n      updateMarkers (label) {\n        // clear canvas for redrawing\n        this.boxes_available = [];\n        clearInterval(this.canvasRefreshInterval);\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.strokeStyle = \"red\";\n        ctx.font = \"15px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"red\";\n        if (this.selectedLabel === label) {\n          // keep the canvas clear canvas if user clicked the label button a second consecutive time\n          this.selectedLabel = \"\";\n          return\n        }\n        this.selectedLabel = label;        // initialize lists of boxes and markers to be drawn\n        const boxMap = new Map();\n        const markers = [];\n        const es_data = this.elasticsearch_data;\n        es_data.forEach( function(record) {\n          if (record.Name === label) {\n            // Save label name overlaying on video timeline\n            markers.push({'time': record.Timestamp/1000, 'text': record.Name, 'overlayText': record.Name});\n            // Save bounding box info if it exists\n            if (record.Instances.length > 0) {\n              // Iterate through all the boxes recorded for the label at this time\n              for (let i=0; i<record.Instances.length; i++) {\n                const item = record.Instances[i];\n                // TODO: move image processing to a separate component\n                if (this.mediaType === \"image\") {\n                  // use timestamp to index boxes in the boxMap collection\n                  const boxinfo = {\n                    'instance': i,\n                    'name': record.Name,\n                    'confidence': (record.Confidence * 1).toFixed(2),\n                    'x': item.BoundingBox.Left * canvas.width,\n                    'y': item.BoundingBox.Top * canvas.height,\n                    'width': item.BoundingBox.Width * canvas.width,\n                    'height': item.BoundingBox.Height * canvas.height\n                  };\n                  boxMap.set(i, [boxinfo])\n                } else {\n                  // Use time resolution of 0.1 second\n                  const timestamp = Math.round(record.Timestamp/100);\n                  const boxinfo = {'instance':i, 'timestamp':Math.ceil(record.Timestamp/100), 'name':record.Name, 'confidence':(record.Confidence * 1).toFixed(2), 'x':item.BoundingBox.Left*canvas.width, 'y':item.BoundingBox.Top*canvas.height, 'width':item.BoundingBox.Width*canvas.width, 'height':item.BoundingBox.Height*canvas.height};\n                  // If there are multiple bounding boxes for this instance at this\n                  // timestamp, then save them together in an array.\n                  if (boxMap.has(timestamp)) {\n                    boxMap.get(timestamp).push(boxinfo)\n                  } else {\n                    boxMap.set(timestamp, [boxinfo])\n                  }\n                }\n              }\n            }\n          }\n        }.bind(this));\n        if (boxMap.size > 0) {\n          this.drawBoxes(boxMap);\n        }\n        // TODO: move image processing to a separate component\n        if (this.mediaType === \"video\") {\n          // redraw markers on video timeline\n          this.player.markers.removeAll();\n          this.player.markers.add(markers);\n        }\n      },\n      async fetchAssetData () {\n          let query = 'AssetId:'+this.$route.params.asset_id+' Confidence:>'+this.Confidence+' Operator:'+this.operator;\n          let apiName = 'contentAnalysisElasticsearch';\n          let path = '/_search';\n          let apiParams = {\n            headers: {'Content-Type': 'application/json'},\n            queryStringParameters: {'q': query, 'default_operator': 'AND', 'size': 10000}\n          };\n          let response = await this.$Amplify.API.get(apiName, path, apiParams);\n          if (!response) {\n            this.showElasticSearchAlert = true\n          }\n          else {\n            let es_data = [];\n            let result = await response;\n            let data = result.hits.hits;\n            if (data.length === 0 && this.Confidence > 55) {\n                this.lowerConfidence = true;\n                this.lowerConfidenceMessage = 'Try lowering confidence threshold'\n            }\n            else {\n              this.lowerConfidence = false;\n              for (let i = 0, len = data.length; i < len; i++) {\n                es_data.push(data[i]._source)\n              }\n            }\n            this.elasticsearch_data = JSON.parse(JSON.stringify(es_data));\n            this.isBusy = false\n        }\n      },\n      drawBoxes: function(boxMap) {\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        // TODO: move image processing to a separate component\n        if (this.mediaType === \"image\") {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.beginPath();\n          ctx.strokeStyle = \"red\";\n          ctx.font = \"15px Arial\";\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillStyle = \"red\";\n          // For each box instance...\n          boxMap.forEach( i => {\n            const drawMe = i[0];\n            if (drawMe) {\n              ctx.rect(drawMe.x, drawMe.y, drawMe.width, drawMe.height);\n              // Draw object name and confidence score\n              ctx.fillText(drawMe.name + \" (\" + drawMe.confidence + \"%)\", (drawMe.x + drawMe.width / 2), drawMe.y - 10);\n              ctx.stroke();\n            }\n          });\n          // now return so we avoid rendering any of the video related components below\n          return\n        }\n        // If user just clicked a new label...\n        if (this.canvasRefreshInterval !== undefined) {\n          // ...then reset the old canvas refresh interval.\n          clearInterval(this.canvasRefreshInterval)\n        }\n        // Look for and draw bounding boxes every 100ms\n        const interval_ms = 100;\n        const erase_on_iteration = 2;\n        let i = 0;\n        this.canvasRefreshInterval = setInterval(function () {\n          i++;\n          // erase old bounding boxes\n          if (!this.player.paused() && i % erase_on_iteration === 0) {\n            i=0;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.beginPath();\n            ctx.strokeStyle = \"red\";\n            ctx.font = \"15px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = \"red\";\n          }\n          // Get current player timestamp to the nearest 1/10th second\n          const player_timestamp = Math.round(this.player.currentTime()*10.0);\n          // If we have a box for the player's timestamp...\n          if (boxMap.has(player_timestamp)) {\n            i=0;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.beginPath();\n            ctx.strokeStyle = \"red\";\n            ctx.font = \"15px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = \"red\";\n            // ...then get a list of box instances\n            const instance_list = (boxMap.get(player_timestamp)).map( item => item.instance).filter((v, i, a) => a.indexOf(v) === i);\n            // For each box instance...\n            instance_list.forEach( i => {\n              // ...get all of the boxes belonging to this instance\n              // at the current timestamp.\n              const boxes = boxMap.get(player_timestamp).filter(box => box.instance === i);\n              boxes.forEach (drawMe => {\n                if (drawMe) {\n                  ctx.rect(drawMe.x, drawMe.y, drawMe.width, drawMe.height);\n                  // Draw object name and confidence score\n                  ctx.fillText(drawMe.name + \" (\" + drawMe.confidence + \"%)\", (drawMe.x + drawMe.width / 2), drawMe.y - 10);\n                }\n              })\n            });\n            ctx.stroke();\n          }\n        }.bind(this), interval_ms);\n      },\n      chartData() {\n        let timeseries = new Map();\n        function saveTimestamp (millisecond) {\n          if (timeseries.has(millisecond)) {\n            timeseries.set(millisecond, {\"x\": millisecond, \"y\": timeseries.get(millisecond).y + 1})\n          } else {\n            timeseries.set(millisecond, {\"x\": millisecond, \"y\":1})\n          }\n        }\n        const es_data = this.elasticsearch_data;\n        es_data.forEach( function(record) {\n          // Define timestamp with millisecond resolution\n          const millisecond = Math.round(record.Timestamp);\n          if (this.selectedLabel) {\n            // If label is defined, then enumerate timestamps for that label\n            if (record.Name === this.selectedLabel) {\n              if (record.Instances.length > 0) {\n                for (let i = 0; i < record.Instances.length; i++) {\n                  saveTimestamp(millisecond);\n                }\n              } else {\n                saveTimestamp(millisecond);\n              }\n            }\n          } else {\n            // No label has been selected, so enumerate timestamps for all label names.\n            // Iterate through bounding boxes if present.\n            if (record.Instances.length > 0) {\n              for (let i = 0; i < record.Instances.length; i++) {\n                saveTimestamp(millisecond);\n              }\n            } else {\n              saveTimestamp(millisecond);\n            }\n          }\n        }.bind(this));\n        //sort the timeseries map by its millisecond key\n        const ordered_timeseries = new Map([...timeseries.entries()].slice().sort((a, b) => a[0] - b[0]));\n        const chartTuples = Array.from(ordered_timeseries.values());\n        this.$store.commit('updateTimeseries', chartTuples);\n        this.$store.commit('updateSelectedLabel', this.selectedLabel);\n      },\n    }\n  }\n</script>\n"]}]}
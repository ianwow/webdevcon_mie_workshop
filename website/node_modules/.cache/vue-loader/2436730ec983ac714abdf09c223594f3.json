{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/components/Transcript.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/components/Transcript.vue","mtime":1637778907439},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/thread-loader/dist/cjs.js","mtime":1633407346686},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js","mtime":1633407348173},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiVHJhbnNjcmlwdCIsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHRyYW5zY3JpcHQ6ICIiLAogICAgICBpc0J1c3k6IGZhbHNlLAogICAgICBvcGVyYXRvcjogInRyYW5zY3JpcHQiLAogICAgICBub1RyYW5zY3JpcHQ6IGZhbHNlCiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgaXNQcm9mYW5lKCkgewogICAgICBjb25zdCBGaWx0ZXIgPSByZXF1aXJlKCdiYWQtd29yZHMnKTsKICAgICAgY29uc3QgcHJvZmFuaXR5RmlsdGVyID0gbmV3IEZpbHRlcih7IHBsYWNlSG9sZGVyOiAnXycgfSk7CiAgICAgIHJldHVybiBwcm9mYW5pdHlGaWx0ZXIuaXNQcm9mYW5lKHRoaXMudHJhbnNjcmlwdCk7CiAgICB9LAogIH0sCiAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMudHJhbnNjcmlwdCA9ICIiCiAgICBjb25zb2xlLmxvZygnZGVhY3RpdmF0ZWQgY29tcG9uZW50OicsIHRoaXMub3BlcmF0b3IpCiAgfSwKICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uICgpIHsKICAgIGNvbnNvbGUubG9nKCdhY3RpdmF0ZWQgY29tcG9uZW50OicsIHRoaXMub3BlcmF0b3IpOwogICAgdGhpcy5mZXRjaEFzc2V0RGF0YSgpOwogIH0sCiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gKCkgewogICAgICB0aGlzLnRyYW5zY3JpcHQgPSAnJwogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgZmV0Y2hBc3NldERhdGEgKCkgewogICAgICBsZXQgcXVlcnkgPSAnQXNzZXRJZDonK3RoaXMuJHJvdXRlLnBhcmFtcy5hc3NldF9pZCsgJyBfaW5kZXg6bWlldmlkZW90cmFuc2NyaXB0JzsKICAgICAgbGV0IGFwaU5hbWUgPSAnY29udGVudEFuYWx5c2lzRWxhc3RpY3NlYXJjaCc7CiAgICAgIGxldCBwYXRoID0gJy9fc2VhcmNoJzsKICAgICAgbGV0IGFwaVBhcmFtcyA9IHsKICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30sCiAgICAgICAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiB7J3EnOiBxdWVyeSwgJ2RlZmF1bHRfb3BlcmF0b3InOiAnQU5EJywgJ3NpemUnOiAxMDAwMH0KICAgICAgfTsKICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy4kQW1wbGlmeS5BUEkuZ2V0KGFwaU5hbWUsIHBhdGgsIGFwaVBhcmFtcyk7CiAgICAgIGlmICghcmVzcG9uc2UpIHsKICAgICAgICB0aGlzLnNob3dFbGFzdGljU2VhcmNoQWxlcnQgPSB0cnVlCiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlOwogICAgICAgIGxldCBkYXRhID0gcmVzdWx0LmhpdHMuaGl0czsKICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHRoaXMubm9UcmFuc2NyaXB0ID0gdHJ1ZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgIGlmICgndHJhbnNjcmlwdCcgaW4gZGF0YVtpXS5fc291cmNlKSB7CiAgICAgICAgICAgICAgdGhpcy50cmFuc2NyaXB0ID0gdGhpcy50cmFuc2NyaXB0LmNvbmNhdChkYXRhW2ldLl9zb3VyY2UudHJhbnNjcmlwdCArICIgIikKICAgICAgICAgICAgICB0aGlzLm5vVHJhbnNjcmlwdCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRoaXMuaXNCdXN5ID0gZmFsc2UKICAgICAgfQogICAgfQogIH0KfQo="},{"version":3,"sources":["Transcript.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Transcript.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div v-if=\"noTranscript === true\">\n      No transcript found for this asset\n    </div>\n    <div v-if=\"isBusy\">\n      <b-spinner\n        variant=\"secondary\"\n        label=\"Loading...\"\n      />\n      <p class=\"text-muted\">\n        (Loading...)\n      </p>\n    </div>\n    <div v-else>\n      <div v-if=\"isProfane\">\n        <span style=\"color:red\">WARNING: Transcript contains potentially offensive words.</span>\n        <br>\n        <br>\n      </div>\n      {{ transcript }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Transcript\",\n  data() {\n    return {\n      transcript: \"\",\n      isBusy: false,\n      operator: \"transcript\",\n      noTranscript: false\n    }\n  },\n  computed: {\n    isProfane() {\n      const Filter = require('bad-words');\n      const profanityFilter = new Filter({ placeHolder: '_' });\n      return profanityFilter.isProfane(this.transcript);\n    },\n  },\n  deactivated: function () {\n    this.transcript = \"\"\n    console.log('deactivated component:', this.operator)\n  },\n  activated: function () {\n    console.log('activated component:', this.operator);\n    this.fetchAssetData();\n  },\n  beforeDestroy: function () {\n      this.transcript = ''\n  },\n  methods: {\n    async fetchAssetData () {\n      let query = 'AssetId:'+this.$route.params.asset_id+ ' _index:mievideotranscript';\n      let apiName = 'contentAnalysisElasticsearch';\n      let path = '/_search';\n      let apiParams = {\n        headers: {'Content-Type': 'application/json'},\n        queryStringParameters: {'q': query, 'default_operator': 'AND', 'size': 10000}\n      };\n      let response = await this.$Amplify.API.get(apiName, path, apiParams);\n      if (!response) {\n        this.showElasticSearchAlert = true\n      }\n      else {\n        let result = await response;\n        let data = result.hits.hits;\n        if (data.length === 0) {\n          this.noTranscript = true\n        }\n        else {\n          for (let i = 0, len = data.length; i < len; i++) {\n            if ('transcript' in data[i]._source) {\n              this.transcript = this.transcript.concat(data[i]._source.transcript + \" \")\n              this.noTranscript = false;\n            }\n          }\n        }\n        this.isBusy = false\n      }\n    }\n  }\n}\n</script>\n"]}]}
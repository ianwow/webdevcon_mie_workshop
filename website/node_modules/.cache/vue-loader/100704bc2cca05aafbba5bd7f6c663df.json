{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/components/VideoPlayer.vue?vue&type=style&index=1&id=8ef35988&scoped=true&lang=css&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/components/VideoPlayer.vue","mtime":1631830990691},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/css-loader/index.js","mtime":1633407346668},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1633407349521},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/postcss-loader/src/index.js","mtime":1633407348170},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouY2FudmFzIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwOwogIGxlZnQ6IDMwcHg7CiAgLypiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDAsMCwwLjUpOyovCiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0K"},{"version":3,"sources":["VideoPlayer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VideoPlayer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <b-container fluid>\n    <video\n      id=\"videoPlayer\"\n      ref=\"videoPlayer\"\n      width=\"600\"\n      height=\"300\"\n      data-setup=\"{ &quot;inactivityTimeout&quot;: 0 }\"\n      class=\"video-js vjs-fluid vjs-default-skin\"\n      controls\n      playsinline\n    >\n      <source\n        :src=\"video_url\"\n        type=\"video/mp4\"\n      >\n    </video>\n    <canvas\n      id=\"canvas\"\n      class=\"canvas\"\n    />\n  </b-container>\n</template>\n\n<script>\nimport videojs from 'video.js'\nimport '@/../node_modules/video.js/dist/video-js.css'\nimport '@/../node_modules/videojs-markers/dist/videojs.markers.css'\nimport '@/../node_modules/videojs-markers/dist/videojs-markers.js'\nimport '@/../node_modules/videojs-hotkeys/build/videojs.hotkeys.min.js'\n\nexport default {\n  name: 'VideoPlayer',\n  props: {\n    options: {\n      type: Object,\n      default() {\n        return {};\n      }\n    }\n  },\n  data: function () {\n    return {\n      video_url: '',\n      player: null\n    }\n  },\n  beforeDestroy() {\n    if (this.player) {\n      this.player.dispose();\n      this.$store.commit('updatePlayer', null)\n    }\n  },\n  created() {\n    this.video_url = this.options.sources[0].src;\n  },\n  mounted: function () {\n    this.player = videojs(this.$refs.videoPlayer, {  playbackRates: [0.5, 1, 1.5, 2] });\n    this.player.ready(() => {\n      this.player.hotkeys({\n        volumeStep: 0.1,\n        seekStep: 1,\n        enableVolumeScroll: false,\n        enableNumbers: false,\n        enableModifiersForNumbers: false\n      });\n      this.player.loop(true);\n      this.player.markers({\n        breakOverlay: {\n          display: false,\n        },\n        markerTip: {\n          display: true,\n          text: function (marker) {\n            return marker.text;\n          }\n        },\n        markers: []\n      });\n      // Set player time to 2 second mark in order to avoid a black poster image for\n      // videos that begin with a fade from black.\n      this.player.currentTime(2);\n      let vm = this\n      this.player.on('timeupdate', function() {\n        let currentTime = this.currentTime()\n        vm.$store.commit('updateCurrentTime', currentTime)\n      });\n      this.$store.commit('updatePlayer', this.player);\n    });\n    this.player.on('loadeddata', function() {\n      // Set canvas size to videoPlayer size\n      const canvas = document.getElementById('canvas');\n      const video = document.getElementById('videoPlayer');\n      canvas.width = video.clientWidth;\n      canvas.height = video.clientHeight;\n    });\n    window.addEventListener('resize', function () {\n      console.log(\"resize\")\n      // Update canvas size when window is resized\n      const canvas = document.getElementById('canvas');\n      const video = document.getElementById('videoPlayer');\n      canvas.width = video.clientWidth;\n      canvas.height = video.clientHeight;\n    });\n  },\n  beforeUpdate: function () {\n    this.$store.commit('updatePlayer', this.player)\n  }\n}\n</script>\n\n<style>\n  .video-js .vjs-current-time, .vjs-no-flex .vjs-current-time {\n    display: block; }\n</style>\n<style scoped>\n  .canvas {\n    position: absolute;\n    top: 0;\n    left: 30px;\n    /*background-color:rgba(255,0,0,0.5);*/\n    pointer-events: none;\n  }\n</style>\n"]}]}
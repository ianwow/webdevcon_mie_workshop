{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/views/Collection.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/views/Collection.vue","mtime":1633712488561},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/css-loader/index.js","mtime":1633407346668},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1633407349521},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/postcss-loader/src/index.js","mtime":1633407348170},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCnRkIHsKICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwp9Ci5oZWFkZXJUZXh0QmFja2dyb3VuZCB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzE5MTkxODsKICBtYXgtd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiBhdXRvOwogIHBhZGRpbmctYm90dG9tOiAxJTsKfQoucmVzdWx0c1RhYmxlIHsKICBwYWRkaW5nLXRvcDogMSU7Cn0KaDEgewogIGNvbG9yOiAjRUQ5MDBFOwp9CmEgewogIGNvbG9yOiAjRUQ5MDBFOwp9Ci50YWdsaW5lIHsKICBjb2xvcjogd2hpdGUKfQouYnRuLW9yYW5nZSB7CiAgY29sb3I6ICNFRDkwMEUKfQouYnRuLXJlZCB7CiAgY29sb3I6IHJlZAp9Ci50YWJsZVdvcmRXcmFwIHsKICB3aGl0ZS1zcGFjZTpub3JtYWw7CiAgd29yZC1icmVhazpicmVhay1hbGw7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICB0ZXh0LW92ZXJmbG93OmVsbGlwc2lzOwp9Cg=="},{"version":3,"sources":["Collection.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Collection.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <div class=\"headerTextBackground\">\n      <Header :is-collection-active=\"true\" />\n      <b-container fluid>\n        <b-alert\n          v-model=\"showElasticSearchAlert\"\n          variant=\"danger\"\n          dismissible\n        >\n          Elasticsearch error. Please check browser and elasticsearch access logs.\n        </b-alert>\n        <b-alert\n          v-model=\"showDataplaneAlert\"\n          variant=\"danger\"\n          dismissible\n        >\n          Dataplane Error. Please check browser and dataplane logs.\n        </b-alert>\n        <b-alert\n          v-model=\"showDeletedAlert\"\n          variant=\"success\"\n          dismissible\n          fade\n        >\n          Successfully Deleted Asset\n        </b-alert>\n        <b-row align-h=\"center\">\n          <h1>Media Collection</h1>\n        </b-row>\n        <b-row\n          align-h=\"center\"\n          class=\"tagline\"\n        >\n          <b>Discover insights in your media by searching for keywords, objects, or even people.</b>\n        </b-row>\n        <b-row\n          class=\"my-1\"\n          align-v=\"center\"\n          align-h=\"center\"\n        >\n          <b-col sm=\"5\">\n            <input\n              v-model=\"user_defined_query\"\n              type=\"text\"\n              placeholder=\"Search Collection...\"\n              @keyup.enter=\"searchCollection\"\n            >\n          </b-col>\n          <b-col sm=\"1\">\n            <b-button\n              size=\"lg\"\n              @click=\"searchCollection\"\n            >\n              Search\n            </b-button>\n          </b-col>\n        </b-row>\n      </b-container>\n    </div>\n    <b-container\n      fluid\n      class=\"resultsTable\"\n    >\n      <b-row>\n        <b-col>\n          <div>\n            <div class=\"column\">\n              <b-row class=\"my-1\">\n                <b-col>\n                  <b-table\n                    striped\n                    hover\n                    fixed\n                    responsive\n                    show-empty\n                    :fields=\"fields\"\n                    :items=\"asset_list\"\n                    :sort-by.sync=\"sortBy\"\n                    :sort-desc.sync=\"sortDesc\"\n                    :current-page=\"currentPage\"\n                    :per-page=\"perPage\"\n                  >\n                    <template #cell(Thumbnail)=\"data\">\n                      <VideoThumbnail\n                        :thumbnail-i-d=\"data.item.thumbnailID\"\n                        :signed-url=\"data.item.signedUrl\"\n                      />\n                    </template>\n                    <template #cell(Created)=\"data\">\n                      {{ data.item.Created.toLocaleDateString() }}<br>\n                      {{ data.item.Created.toLocaleTimeString() }}\n                    </template>\n                    <template #cell(status)=\"data\">\n                      <!-- open link in new tab -->\n                      <a v-if=\"data.item.status !== 'Queued'\" href=\"\" @click.stop.prevent=\"openWindow(data.item.state_machine_console_link)\">{{ data.item.status }}</a>\n                      <div v-if=\"data.item.status === 'Queued'\">\n                        {{ data.item.status }}\n                      </div>\n                    </template>\n                    <template #cell(Actions)=\"data\">\n                      <b-link\n                        :href=\"(`/analysis/${data.item.asset_id}`)\"\n                      >\n                        Analyze\n                      </b-link>\n                      <br>\n                      <b-link\n                        class=\"text-danger\"\n                        @click=\"deleteAsset(`${data.item.asset_id}`)\"\n                      >\n                        Delete\n                      </b-link>\n                    </template>\n                  </b-table>\n                  <div\n                    v-if=\"noAssets\"\n                  >\n                    <p>\n                      Looks like no assets have been uploaded! Try uploading <a href=\"upload\" rel=\"noopener noreferrer\">here</a>.\n                    </p>\n                  </div>\n                  <div\n                    v-if=\"isBusy\"\n                    class=\"wrapper\"\n                  >\n                    <Loading v-if=\"isBusy\" />\n                    <p class=\"text-muted\">\n                      (Loading...)\n                    </p>\n                  </div>\n                </b-col>\n              </b-row>\n              <b-row align-h=\"center\">\n                <b-pagination\n                  v-model=\"currentPage\"\n                  :total-rows=\"totalRows\"\n                  :per-page=\"perPage\"\n                  class=\"my-0\"\n                />\n              </b-row>\n            </div>\n          </div>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\n  import Header from '@/components/Header.vue'\n  import VideoThumbnail from '@/components/VideoThumbnail.vue'\n  import Loading from '@/components/Loading.vue'\n\n  export default {\n    name: \"Run\",\n    components: {\n      Header,\n      Loading,\n      VideoThumbnail\n    },\n    data() {\n      return {\n        showElasticSearchAlert: false,\n        showDataplaneAlert: false,\n        showDeletedAlert: 0,\n        noAssets: null,\n        currentPage: 1,\n        perPage: 10,\n        isBusy: false,\n        user_defined_query: \"\",\n        asset_list: [],\n        sortBy: 'Created',\n        sortDesc: true,\n        fields: [\n            {\n              'Thumbnail': {\n              label: \"Thumbnail\",\n              sortable: false\n              }\n            },\n            {\n              'Filename': {\n              label: \"File Name\",\n              sortable: true,\n              tdClass: [\"tableWordWrap\"]\n              }\n            },\n            {\n              'status': {\n              label: \"Status\",\n              sortable: true,\n              tdClass: [\"tableWordWrap\"]\n              }\n            },\n            {\n            'asset_id': {\n              label: 'Asset ID',\n              sortable: false,\n              tdClass: [\"tableWordWrap\"]\n              }\n            },\n            {\n              'Created': {\n              label: \"Created\",\n              sortable: true,\n              tdClass: [\"tableWordWrap\"]\n              }\n            },\n            {\n              'Actions': {\n              label: 'Actions',\n              sortable: false\n              }\n            }\n        ]\n      }\n    },\n    computed: {\n      totalRows() {\n        return this.asset_list.length\n      }\n    },\n    created: function () {\n      this.isBusy = true;\n      this.retrieveAndFormatAsssets()\n    },\n    methods: {\n      openWindow: function (url) {\n        window.open(url, \"_blank\", \"noopener,noreferer\");\n      },\n      async deleteAsset(assetId) {\n        let apiName = 'mieDataplaneApi'\n        let path = 'metadata/' + assetId\n        let requestOpts = {\n          response: true,\n        };\n        try {\n          await this.$Amplify.API.del(apiName, path, requestOpts);\n          this.showDeletedAlert = 5;\n          this.asset_list = [];\n          this.retrieveAndFormatAsssets()\n        } catch (error) {\n          this.showDataplaneAlert = true\n          console.log(error)\n        }\n      },\n      async elasticsearchQuery (query) {\n            let apiName = 'contentAnalysisElasticsearch';\n            let path = '/_search';\n            let apiParams = {\n              headers: {'Content-Type': 'application/json'},\n              body: {\n              \"aggs\" : {\n                \"distinct_assets\" : {\n                  \"terms\" : { \"field\" : \"AssetId.keyword\", \"size\" : 10000 }\n                }\n                }\n              },\n              queryStringParameters: {'q': query, '_source': 'AssetId'}\n            };\n            let response = await this.$Amplify.API.post(apiName, path, apiParams);\n            if (!response) {\n              this.showElasticSearchAlert = true\n            }\n            else {\n              this.noAssets = false;\n              return await response;\n        }\n      },\n      async searchCollection () {\n          this.noSearchResults = false;\n          this.isBusy = true;\n          let query = this.user_defined_query;\n          // if search is empty string then get asset list from dataplane instead of Elasticsearch.\n          if (query === \"\") {\n            this.showElasticSearchAlert = false;\n            this.asset_list = [];\n            this.retrieveAndFormatAsssets();\n            this.isBusy = false;\n          }\n          else {\n            // Get the list of assets that contain metadata matching the user-specified search query.\n            let elasticData = await this.elasticsearchQuery(query);\n            if (elasticData.hits.total === 0) {\n              // the search returned no data\n              this.asset_list = [];\n              this.noSearchResults = true;\n              this.isBusy = false;\n            }\n            else {\n              let assets = [];\n              this.asset_list = [];\n              this.noSearchResults = false;\n              let buckets = elasticData.aggregations.distinct_assets.buckets;\n              for (var i = 0, len = buckets.length; i < len; i++) {\n                let assetId = buckets[i].key;\n                let assetInfo = await this.getAssetInformation(assetId);\n                if (assetInfo !== null) {\n                  assets.push(assetInfo)\n                }\n            }\n            if (assets.length === 0) {\n              this.noSearchResults = true;\n              this.isBusy = false\n            }\n            else {\n              this.pushAssetsToTable(assets);\n              this.isBusy = false\n            }\n          }\n        }\n      },\n      async getAssetWorkflowStatus (assetId) {\n        let apiName = 'mieWorkflowApi'\n        let path = 'workflow/execution/asset/' + assetId\n        let requestOpts = {\n          response: true,\n        };\n        try {\n          let response = await this.$Amplify.API.get(apiName, path, requestOpts);\n          return response.data\n        } catch (error) {\n          console.log(error)\n        }\n      },\n      async getAssetThumbnail (bucket, s3Key) {\n        const data = { \"S3Bucket\": bucket, \"S3Key\": s3Key };\n        let apiName = 'mieDataplaneApi'\n        let path = 'download'\n        let requestOpts = {\n          body: data,\n          response: true,\n          responseType: 'text'\n        };\n        try {\n          let response = await this.$Amplify.API.post(apiName, path, requestOpts);\n          return response.data\n        } catch (error) {\n          this.showDataplaneAlert = true\n          console.log(error)\n        }\n      },\n      async getAssetInformation (assetId) {\n        let apiName = 'mieDataplaneApi'\n        let path = 'metadata/' + assetId\n        let requestOpts = {\n          response: true,\n        };\n        try {\n          let response = await this.$Amplify.API.get(apiName, path, requestOpts);\n          return response.data\n        } catch (error) {\n          this.showDataplaneAlert = true\n          console.log(error)\n        }\n      },\n      async fetchAssets () {\n        let apiName = 'mieDataplaneApi'\n        let path = 'metadata'\n        let requestOpts = {\n          response: true,\n        };\n        try {\n          let response = await this.$Amplify.API.get(apiName, path, requestOpts);\n          return response.data\n        } catch (error) {\n          this.showDataplaneAlert = true\n          console.log(error)\n        }\n      },\n      async pushAssetsToTable(assets) {\n        for (var i = 0, len = assets.length; i < len; i++) {\n          var assetId;\n          if (typeof assets[i] === 'object') {\n            // If the asset list is coming from Elasticsearch, we get the assetId like this:\n            assetId = assets[i].asset_id\n          } else {\n            // If the asset list is coming from the dataplaneapi, we get the assetId like this:\n            assetId = assets[i]\n          }\n          // Invoke an asynchronous task to add assets to the table in parallel so the table updates\n          // as fast as possible. For large media collections this may take several seconds.\n          this.pushAssetToTable(assetId)\n        }\n      },\n      async pushAssetToTable (assetId) {\n        const assetInfo = await this.getAssetInformation(assetId);\n        let created = new Date(0);\n        created.setUTCSeconds(assetInfo.results.Created);\n        const metadata_folder = \"/private/assets/\"+assetId\n        const source_bucket = assetInfo.results.S3Bucket;\n        const source_key = assetInfo.results.S3Key;\n        let s3Uri = 's3://' + this.DATAPLANE_BUCKET + '/' + metadata_folder;\n        const filename = source_key.split(\"/\").pop();\n        // The thumbnail is created by Media Convert, see:\n        // source/operators/thumbnail/start_thumbnail.py\n        let thumbnailS3Key = 'private/assets/' + assetId + '/' + filename.substring(0, filename.lastIndexOf(\".\")) + '_thumbnail.0000001.jpg';\n        let thumbnailS3Bucket = this.DATAPLANE_BUCKET\n        // If it's an image then Media Convert won't create a thumbnail.\n        // In that case we use the uploaded image as the thumbnail.\n        const supported_image_types = [\".jpg\", \".jpeg\", \".tif\", \".tiff\", \".png\", \".apng\", \".gif\", \".bmp\", \".s gvg\"];\n        const media_type = filename.substring(filename.lastIndexOf(\".\")).toLowerCase();\n        if (supported_image_types.includes(media_type)) {\n          // use the uploaded image as a thumbnail\n          thumbnailS3Key = source_key;\n          thumbnailS3Bucket = source_bucket;\n        }\n        let [thumbnail, workflowStatus] = await Promise.all([this.getAssetThumbnail(thumbnailS3Bucket, thumbnailS3Key), this.getAssetWorkflowStatus(assetId)]);\n        if (workflowStatus[0] && thumbnail)\n        {\n          this.asset_list.push({\n            asset_id: assetId,\n            Created: created,\n            Filename: filename,\n            status: workflowStatus[0].Status,\n            state_machine_console_link: \"https://\" + this.AWS_REGION + \".console.aws.amazon.com/states/home?region=\" + this.AWS_REGION + \"#/executions/details/\" + workflowStatus[0].StateMachineExecutionArn,\n            s3_uri: s3Uri,\n            signedUrl: thumbnail,\n            thumbnailID: '_' + assetId,\n            Thumbnail: '',\n            Actions: 'Run'\n          })\n        }\n      },\n\n      async retrieveAndFormatAsssets () {\n        let data = await this.fetchAssets();\n        let assets = data.assets;\n        if (assets.length === 0) {\n          this.noAssets = true;\n          this.noSearchResults = false;\n          this.isBusy = false;\n        }\n        else {\n          this.noAssets = false;\n          this.pushAssetsToTable(assets);\n          this.isBusy = false\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  td {\n    vertical-align: middle;\n  }\n  .headerTextBackground {\n    background-color: #191918;\n    max-width: 100%;\n    height: auto;\n    padding-bottom: 1%;\n  }\n  .resultsTable {\n    padding-top: 1%;\n  }\n  h1 {\n    color: #ED900E;\n  }\n  a {\n    color: #ED900E;\n  }\n  .tagline {\n    color: white\n  }\n  .btn-orange {\n    color: #ED900E\n  }\n  .btn-red {\n    color: red\n  }\n  .tableWordWrap {\n    white-space:normal;\n    word-break:break-all;\n    overflow: hidden;\n    text-overflow:ellipsis;\n  }\n</style>\n"]}]}
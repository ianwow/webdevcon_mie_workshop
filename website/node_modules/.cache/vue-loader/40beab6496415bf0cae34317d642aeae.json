{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/views/UploadToAWSS3.vue?vue&type=template&id=3386e493&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/views/UploadToAWSS3.vue","mtime":1633119093999},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1633407349661},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/views/UploadToAWSS3.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/views/UploadToAWSS3.vue","mtime":1633712488562},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js","mtime":1633407348173},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["UploadToAWSS3.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8OA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"UploadToAWSS3.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <Header :is-upload-active=\"true\" />\n    <br>\n    <b-container>\n      <b-alert\n        :show=\"dismissCountDown\"\n        dismissible\n        variant=\"danger\"\n        @dismissed=\"dismissCountDown=0\"\n        @dismiss-count-down=\"countDownChanged\"\n      >\n        {{ uploadErrorMessage }}\n      </b-alert>\n      <b-alert\n        :show=\"showInvalidFile\"\n        variant=\"danger\"\n      >\n        {{ invalidFileMessages[invalidFileMessages.length-1] }}\n      </b-alert>\n      <h1>Upload Content</h1>\n      <p>{{ description }}</p>\n      <vue-dropzone\n        id=\"dropzone\"\n        ref=\"myVueDropzone\"\n        :awss3=\"awss3\"\n        :options=\"dropzoneOptions\"\n        @vdropzone-s3-upload-error=\"s3UploadError\"\n        @vdropzone-file-added=\"fileAdded\"\n        @vdropzone-removed-file=\"fileRemoved\"\n        @vdropzone-success=\"runWorkflow\"\n        @vdropzone-sending=\"upload_in_progress=true\"\n        @vdropzone-queue-complete=\"upload_in_progress=false\"\n      />\n      <br>\n      <b-button v-b-toggle.collapse-2 class=\"m-1\">\n        Configure Workflow\n      </b-button>\n      <b-button v-if=\"validForm && upload_in_progress===false\" variant=\"primary\" @click=\"uploadFiles\">\n        Upload and Run Workflow\n      </b-button>\n      <b-button v-else disabled variant=\"primary\" @click=\"uploadFiles\">\n        Upload and Run Workflow\n      </b-button>\n      <br>\n      <!-- TODO: add a drop-down option in this modal to choose update workflow, then update workflowConfigWithInput to include the appropriate workflow config -->\n      <b-button\n        :pressed=\"false\"\n        size=\"sm\"\n        variant=\"link\"\n        class=\"text-decoration-none\"\n        @click=\"showExecuteApi = true\"\n      >\n        Show API request to run workflow\n      </b-button>\n      <b-modal\n        v-model=\"showExecuteApi\"\n        scrollable\n        title=\"REST API\"\n        ok-only\n      >\n        <label>Workflow Type:</label>\n        <b-form-group>\n          <b-form-radio-group\n              id=\"curlable-workflows\"\n              v-model=\"curlWorkflow\"\n              name=\"curlable-workflows\"\n          >\n          <b-form-radio  value=\"Video\">Video</b-form-radio>\n          <b-form-radio  value=\"Image\">Image</b-form-radio>\n          </b-form-radio-group>\n        </b-form-group>\n        <label>Request URL:</label>\n        <pre v-highlightjs><code class=\"bash\">POST {{ WORKFLOW_API_ENDPOINT }}workflow/execution</code></pre>\n        <label>Request data:</label>\n        <pre v-highlightjs=\"JSON.stringify(workflowConfigWithInput)\"><code class=\"json\"></code></pre>\n        <label>Sample command:</label>\n        <p>Be sure to replace \"{{ sample_file }}\" with the S3 key of an actual file.</p>\n        <pre v-highlightjs=\"curlWorkflowExecution\"><code class=\"bash\"></code></pre>\n      </b-modal>\n      <br>\n      <span v-if=\"upload_in_progress\" class=\"text-secondary\">Upload in progress</span>\n      <b-container v-if=\"upload_in_progress\">\n        <b-spinner label=\"upload_in_progress\" />\n      </b-container>\n      <br>\n      <b-collapse id=\"collapse-2\">\n        <b-container class=\"text-left\">\n          <b-card-group deck>\n            <b-card header=\"Vision Operators\">\n              <b-form-group>\n                <b-form-checkbox-group\n                  id=\"checkbox-group-1\"\n                  v-model=\"enabledOperators\"\n                  :options=\"videoOperators\"\n                  name=\"flavour-1\"\n                ></b-form-checkbox-group>\n                <label>Thumbnail position: </label>\n                <b-form-input v-model=\"thumbnail_position\" type=\"range\" min=\"1\" max=\"20\" step=\"1\"></b-form-input> {{ thumbnail_position }} sec\n                <b-form-input v-if=\"enabledOperators.includes('genericDataLookup')\" id=\"generic_data_filename\" v-model=\"genericDataFilename\" placeholder=\"Enter S3 key for data file\" ></b-form-input>\n                <b-button\n                  v-if=\"enabledOperators.includes('genericDataLookup')\"\n                  :pressed=\"false\"\n                  size=\"sm\"\n                  variant=\"link\"\n                  class=\"text-decoration-none\"\n                  @click=\"showGenericOperatorHelp = true\"\n                >\n                  How do I use generic data?\n                </b-button>\n                <b-modal\n                  v-model=\"showGenericOperatorHelp\"\n                  scrollable\n                  title=\"Using generic metadata\"\n                  ok-only\n                >\n                  This option allows you to use a precomputed JSON dataset as metadata for a video. The file must be located in <code>s3://{{ DATAPLANE_BUCKET }}/</code>. Specify the S3 key for your JSON file in the workflow configuration form.\n                  <br><br>\n                  You may upload json files alongside media files on this page. In that case, enter <code>public/upload/[filename.json]</code> as the S3 key for the data file.\n                  <br><br>\n                  The <code>generic_data_lookup.py</code> operator loads the specified JSON data into the asset metadata table in DynamoDB. It requires that the JSON data be a dict, not a list. Don't forget to extend the OpenSearch (aka Elasticsearch) consumer (source/consumer/lambda_handler.py) if you want the generic data to be indexed so it can be searchable and rendered in this front-end application.\n                </b-modal>\n\n                <b-form-input v-if=\"enabledOperators.includes('faceSearch')\" id=\"face_collection_id\" v-model=\"faceCollectionId\" placeholder=\"Enter face collection id\"></b-form-input>\n              </b-form-group>\n              <div v-if=\"videoFormError\" style=\"color:red\">\n                {{ videoFormError }}\n              </div>\n            </b-card>\n            <b-card header=\"Audio Operators\">\n              <b-form-group>\n                <b-form-checkbox-group\n                  id=\"checkbox-group-2\"\n                  v-model=\"enabledOperators\"\n                  :options=\"audioOperators\"\n                  name=\"flavour-2\"\n                ></b-form-checkbox-group>\n                <div v-if=\"enabledOperators.includes('Transcribe')\">\n                  <label>Source Language</label>\n                  <b-form-select v-model=\"transcribeLanguage\" :options=\"transcribeLanguages\"></b-form-select>\n                </div>\n              </b-form-group>\n              <div v-if=\"audioFormError\" style=\"color:red\">\n                {{ audioFormError }}\n              </div>\n            </b-card>\n            <b-card header=\"Text Operators\">\n              <b-form-group>\n                <b-form-checkbox-group\n                  id=\"checkbox-group-3\"\n                  v-model=\"enabledOperators\"\n                  :options=\"textOperators\"\n                  name=\"flavour-3\"\n                ></b-form-checkbox-group>\n                <div v-if=\"enabledOperators.includes('Translate')\">\n                  <label>Translation Source Language</label>\n                  <b-form-select v-model=\"transcribeLanguage\" :options=\"transcribeLanguages\"></b-form-select>\n                  <label>Translation Target Language</label>\n                  <b-form-select v-model=\"targetLanguageCode\" :options=\"translateLanguages\"></b-form-select>\n                </div>\n                <b-form-checkbox\n                  v-if=\"enabledOperators.includes('ComprehendEntities') || enabledOperators.includes('ComprehendKeyPhrases')\"\n                  v-model=\"ComprehendEncryption\"\n                >\n                  Encrypt Comprehend job\n                </b-form-checkbox>\n                <b-form-input\n                  v-if=\"ComprehendEncryption && (enabledOperators.includes('ComprehendEntities') || enabledOperators.includes('ComprehendKeyPhrases'))\"\n                  v-model=\"kmsKeyId\"\n                  placeholder=\"Enter KMS key ID\"\n                ></b-form-input>\n              </b-form-group>\n              <div v-if=\"textFormError\" style=\"color:red\">\n                {{ textFormError }}\n              </div>\n            </b-card>\n          </b-card-group>\n          <div align=\"right\">\n            <button type=\"button\" class=\"btn btn-link\" @click=\"selectAll\">\n              Select All\n            </button>\n            <button type=\"button\" class=\"btn btn-link\" @click=\"clearAll\">\n              Clear All\n            </button>\n          </div>\n        </b-container>\n      </b-collapse>\n    </b-container>\n    <b-container v-if=\"executed_assets.length > 0\">\n      <label>\n        Execution History\n      </label>\n      <b-table\n        :fields=\"fields\"\n        bordered\n        hover\n        small\n        responsive\n        show-empty\n        fixed\n        :items=\"executed_assets\"\n      >\n        <template #cell(workflow_status)=\"data\">\n          <a v-if=\"data.item.workflow_status !== 'Queued'\" href=\"\" @click.stop.prevent=\"openWindow(data.item.state_machine_console_link)\">{{ data.item.workflow_status }}</a>\n          <div v-if=\"data.item.workflow_status === 'Queued'\">\n            {{ data.item.workflow_status }}\n          </div>\n        </template>\n      </b-table>\n      <b-button size=\"sm\" @click=\"clearHistory\">\n        Clear History\n      </b-button>\n      <br>\n      <b-button\n        :pressed=\"false\"\n        size=\"sm\"\n        variant=\"link\"\n        class=\"text-decoration-none\"\n        @click=\"showWorkflowStatusApi = true\"\n      >\n        Show API request to get execution history\n      </b-button>\n      <b-modal\n        v-model=\"showWorkflowStatusApi\"\n        title=\"REST API\"\n        ok-only\n      >\n        <label>Request URL:</label>\n        <pre v-highlightjs><code class=\"bash\">GET {{ WORKFLOW_API_ENDPOINT }}workflow/execution/asset/{asset_id}</code></pre>\n        <label>Sample command:</label>\n        <p>Be sure to replace <b>{asset_id}</b> with a valid asset ID.</p>\n        <pre v-highlightjs=\"curlExecutionHistory\"><code class=\"bash\"></code></pre>\n      </b-modal>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport vueDropzone from '@/components/vue-dropzone.vue';\nimport Header from '@/components/Header.vue'\nimport { mapState } from 'vuex'\n\nexport default {\n  components: {\n    vueDropzone,\n    Header\n  },\n  data() {\n    return {\n      restApi2: '',\n      curlWorkflow: 'Video',\n      curlWorkflowTypes: [\"Image\", \"Video\"],\n      showWorkflowStatusApi: false,\n      showExecuteApi: false,\n      showGenericOperatorHelp: false,\n      requestURL: \"\",\n      requestBody: \"\",\n      requestType: \"\",\n      fields: [\n        {\n          'asset_id': {\n            label: \"Asset Id\",\n            sortable: false\n          }\n        },\n        {\n          'file_name': {\n            label: \"File Name\",\n            sortable: false\n          }\n        },\n        { 'workflow_status': {\n            label: 'Workflow Status',\n            sortable: false\n          }\n        }\n      ],\n      thumbnail_position: 10,\n      invalid_file_types: 0,\n      upload_in_progress: false,\n      enabledOperators: [\n        \"labelDetection\",\n        \"celebrityRecognition\",\n        \"textDetection\",\n        \"contentModeration\",\n        \"faceDetection\",\n        \"thumbnail\",\n        \"TranscribeVideo\",\n        \"Translate\",\n        \"ComprehendKeyPhrases\",\n        \"ComprehendEntities\",\n        \"shotDetection\",\n        \"technicalCueDetection\"\n      ],\n      videoOperators: [\n        { text: \"Object Detection\", value: \"labelDetection\" },\n        { text: \"Technical Cue Detection\", value: \"technicalCueDetection\" },\n        { text: \"Shot Detection\", value: \"shotDetection\" },\n        { text: \"Celebrity Recognition\", value: \"celebrityRecognition\" },\n        { text: \"Content Moderation\", value: \"contentModeration\" },\n        { text: \"Face Detection\", value: \"faceDetection\" },\n        { text: \"Word Detection\", value: \"textDetection\" },\n        { text: \"Face Search\", value: \"faceSearch\" },\n        { html: \"Generic Data Lookup\", value: \"genericDataLookup\" },\n      ],\n      audioOperators: [{ text: \"Transcribe\", value: \"TranscribeVideo\" }],\n      textOperators: [\n        { text: \"Comprehend Key Phrases\", value: \"ComprehendKeyPhrases\" },\n        { text: \"Comprehend Entities\", value: \"ComprehendEntities\" },\n        { text: \"Translate\", value: \"Translate\" }\n      ],\n      faceCollectionId: \"\",\n      genericDataFilename: \"\",\n      ComprehendEncryption: false,\n      kmsKeyId: \"\",\n      transcribeLanguage: \"en-US\",\n      transcribeLanguages: [\n        {text: 'Arabic, Gulf', value: 'ar-AE'},\n        {text: 'Arabic, Modern Standard', value: 'ar-SA'},\n        {text: 'Chinese Mandarin', value: 'zh-CN'},\n        {text: 'Dutch', value: 'nl-NL'},\n        {text: 'English, Australian', value: 'en-AU'},\n        {text: 'English, British', value: 'en-GB'},\n        {text: 'English, Indian-accented', value: 'en-IN'},\n        {text: 'English, Irish', value: 'en-IE'},\n        {text: 'English, Scottish', value: 'en-AB'},\n        {text: 'English, US', value: 'en-US'},\n        {text: 'English, Welsh', value: 'en-WL'},\n        // Disabled until 'fa' supported by AWS Translate\n        // {text: 'Farsi', value: 'fa-IR'},\n        {text: 'French', value: 'fr-FR'},\n        {text: 'French, Canadian', value: 'fr-CA'},\n        {text: 'German', value: 'de-DE'},\n        {text: 'German, Swiss', value: 'de-CH'},\n        {text: 'Hebrew', value: 'he-IL'},\n        {text: 'Hindi', value: 'hi-IN'},\n        {text: 'Indonesian', value: 'id-ID'},\n        {text: 'Italian', value: 'it-IT'},\n        {text: 'Japanese', value: 'ja-JP'},\n        {text: 'Korean', value: 'ko-KR'},\n        {text: 'Malay', value: 'ms-MY'},\n        {text: 'Portuguese', value: 'pt-PT'},\n        {text: 'Portuguese, Brazilian', value: 'pt-BR'},\n        {text: 'Russian', value: 'ru-RU'},\n        {text: 'Spanish', value: 'es-ES'},\n        {text: 'Spanish, US', value: 'es-US'},\n        {text: 'Tamil', value: 'ta-IN'},\n        // Disabled until 'te' supported by AWS Translate\n        // {text: 'Telugu', value: 'te-IN'},\n        {text: 'Turkish', value: 'tr-TR'},\n      ],\n      translateLanguages: [\n        {text: 'Afrikaans', value: 'af'},\n        {text: 'Albanian', value: 'sq'},\n        {text: 'Amharic', value: 'am'},\n        {text: 'Arabic', value: 'ar'},\n        {text: 'Azerbaijani', value: 'az'},\n        {text: 'Bengali', value: 'bn'},\n        {text: 'Bosnian', value: 'bs'},\n        {text: 'Bulgarian', value: 'bg'},\n        {text: 'Chinese (Simplified)', value: 'zh'},\n        // AWS Translate does not support translating from zh to zh-TW\n        // {text: 'Chinese (Traditional)', value: 'zh-TW'},\n        {text: 'Croatian', value: 'hr'},\n        {text: 'Czech', value: 'cs'},\n        {text: 'Danish', value: 'da'},\n        {text: 'Dari', value: 'fa-AF'},\n        {text: 'Dutch', value: 'nl'},\n        {text: 'English', value: 'en'},\n        {text: 'Estonian', value: 'et'},\n        {text: 'Finnish', value: 'fi'},\n        {text: 'French', value: 'fr'},\n        {text: 'French (Canadian)', value: 'fr-CA'},\n        {text: 'Georgian', value: 'ka'},\n        {text: 'German', value: 'de'},\n        {text: 'Greek', value: 'el'},\n        {text: 'Hausa', value: 'ha'},\n        {text: 'Hebrew', value: 'he'},\n        {text: 'Hindi', value: 'hi'},\n        {text: 'Hungarian', value: 'hu'},\n        {text: 'Indonesian', value: 'id'},\n        {text: 'Italian', value: 'it'},\n        {text: 'Japanese', value: 'ja'},\n        {text: 'Korean', value: 'ko'},\n        {text: 'Latvian', value: 'lv'},\n        {text: 'Malay', value: 'ms'},\n        {text: 'Norwegian', value: 'no'},\n        {text: 'Persian', value: 'fa'},\n        {text: 'Pashto', value: 'ps'},\n        {text: 'Polish', value: 'pl'},\n        {text: 'Portuguese', value: 'pt'},\n        {text: 'Romanian', value: 'ro'},\n        {text: 'Russian', value: 'ru'},\n        {text: 'Serbian', value: 'sr'},\n        {text: 'Slovak', value: 'sk'},\n        {text: 'Slovenian', value: 'sl'},\n        {text: 'Somali', value: 'so'},\n        {text: 'Spanish', value: 'es'},\n        {text: 'Swahili', value: 'sw'},\n        {text: 'Swedish', value: 'sv'},\n        {text: 'Tagalog', value: 'tl'},\n        {text: 'Tamil', value: 'ta'},\n        {text: 'Thai', value: 'th'},\n        {text: 'Turkish', value: 'tr'},\n        {text: 'Ukrainian', value: 'uk'},\n        {text: 'Urdu', value: 'ur'},\n        {text: 'Vietnamese', value: 'vi'},\n      ],\n      sourceLanguageCode: \"en\",\n      targetLanguageCode: \"es\",\n      uploadErrorMessage: \"\",\n      invalidFileMessage: \"\",\n      invalidFileMessages: [],\n      showInvalidFile: false,\n      dismissSecs: 8,\n      dismissCountDown: 0,\n      executed_assets: [],\n      workflow_status_polling: null,\n      workflow_config: {},\n      description: \"Click start to begin. Media analysis status will be shown after upload completes.\",\n      s3_destination: 's3://' + this.DATAPLANE_BUCKET,\n      dropzoneOptions: {\n        url: 'https://' + this.DATAPLANE_BUCKET + '.s3.amazonaws.com',\n        thumbnailWidth: 200,\n        addRemoveLinks: true,\n        autoProcessQueue: false,\n        // disable network timeouts (important for large uploads)\n        timeout: 0,\n        // limit max upload file size (in MB)\n        maxFilesize: 5000,\n      },\n      awss3: {\n        signingURL: '',\n        headers: {},\n        params: {}\n      }\n    }\n  },\n  computed: {\n    ...mapState(['execution_history']),\n    textFormError() {\n      return \"\";\n    },\n    audioFormError() {\n      // Validate transcribe is enabled if any text operator is enabled\n      if (\n          !this.enabledOperators.includes(\"TranscribeVideo\") &&\n          (this.enabledOperators.includes(\"Translate\") ||\n              this.enabledOperators.includes(\"ComprehendEntities\") ||\n              this.enabledOperators.includes(\"ComprehendKeyPhrases\"))\n      ) {\n        return \"Transcribe must be enabled if any text operator is enabled.\";\n      }\n      return \"\";\n    },\n    videoFormError() {\n      // Validate face collection ID if face search is enabled\n      if (this.enabledOperators.includes(\"faceSearch\")) {\n        // Validate that the collection ID is defined\n        if (this.faceCollectionId === \"\") {\n          return \"Face collection name is required.\";\n        }\n        // Validate that the collection ID matches required regex\n        else if (new RegExp(\"[^a-zA-Z0-9_.\\\\-]\").test(this.faceCollectionId)) {\n          return \"Face collection name must match pattern [a-zA-Z0-9_.\\\\\\\\-]+\";\n        }\n        // Validate that the collection ID is not too long\n        else if (this.faceCollectionId.length > 255) {\n          return \"Face collection name must have fewer than 255 characters.\";\n        }\n      }\n      if (this.enabledOperators.includes(\"genericDataLookup\")) {\n        // Validate that the collection ID is defined\n        if (this.genericDataFilename === \"\") {\n          return \"Generic data filename is required.\";\n        }\n        // Validate that the collection ID matches required regex\n        else if (!new RegExp(\"^.+\\\\.json$\").test(this.genericDataFilename)) {\n          return \"Generic data filename must have .json extension.\";\n        }\n        // Validate that the data filename is not too long\n        else if (this.genericDataFilename.length > 255) {\n          return \"Generic data filename must have fewer than 255 characters.\";\n        }\n      }\n      return \"\";\n    },\n    validForm() {\n      let validStatus = true;\n      if (\n          this.invalid_file_types ||\n          this.textFormError ||\n          this.audioFormError ||\n          this.videoFormError\n      )\n        validStatus = false;\n      return validStatus;\n    },\n    imageWorkflowConfig() {\n      // Define the image workflow based on user specified options for workflow configuration.\n      const ValidationStage = {\n        MediainfoImage: {\n          Enabled: true\n        }\n      }\n      const RekognitionStage = {\n        faceSearchImage: {\n          Enabled: this.enabledOperators.includes(\"faceSearch\"),\n          CollectionId:\n              this.faceCollectionId === \"\"\n                  ? \"undefined\"\n                  : this.faceCollectionId\n        },\n        labelDetectionImage: {\n          Enabled: this.enabledOperators.includes(\"labelDetection\")\n        },\n        textDetectionImage: {\n          Enabled: this.enabledOperators.includes(\"textDetection\")\n        },\n        celebrityRecognitionImage: {\n          Enabled: this.enabledOperators.includes(\n              \"celebrityRecognition\"\n          )\n        },\n        contentModerationImage: {\n          Enabled: this.enabledOperators.includes(\"contentModeration\")\n        },\n        faceDetectionImage: {\n          Enabled: this.enabledOperators.includes(\"faceDetection\")\n        }\n      }\n      const workflow_config = {\n        Name: \"CasImageWorkflow\",\n      }\n      workflow_config[\"Configuration\"] = {}\n      workflow_config[\"Configuration\"][\"ValidationStage\"] = ValidationStage\n      workflow_config[\"Configuration\"][\"RekognitionStage\"] = RekognitionStage\n      return workflow_config\n    },\n    videoWorkflowConfig() {\n      // Define the video workflow based on user specified options for workflow configuration.\n      const defaultPrelimVideoStage = {\n        Thumbnail: {\n          ThumbnailPosition: this.thumbnail_position.toString(),\n          Enabled: true\n        },\n        Mediainfo: {\n          Enabled: true\n        }\n      }\n      const defaultVideoStage = {\n        faceDetection: {\n          Enabled: this.enabledOperators.includes(\"faceDetection\")\n        },\n        technicalCueDetection: {\n          Enabled: this.enabledOperators.includes(\"technicalCueDetection\")\n        },\n        shotDetection: {\n          Enabled: this.enabledOperators.includes(\"shotDetection\")\n        },\n        celebrityRecognition: {\n          Enabled: this.enabledOperators.includes(\"celebrityRecognition\")\n        },\n        labelDetection: {\n          Enabled: this.enabledOperators.includes(\"labelDetection\")\n        },\n        contentModeration: {\n          Enabled: this.enabledOperators.includes(\"contentModeration\")\n        },\n        faceSearch: {\n          Enabled: this.enabledOperators.includes(\"faceSearch\"),\n          CollectionId:\n              this.faceCollectionId === \"\"\n                  ? \"undefined\"\n                  : this.faceCollectionId\n        },\n        textDetection: {\n          Enabled: this.enabledOperators.includes(\"textDetection\")\n        },\n        GenericDataLookup: {\n          Enabled: this.enabledOperators.includes(\"genericDataLookup\"),\n          Bucket: this.DATAPLANE_BUCKET,\n          Key:\n              this.genericDataFilename === \"\"\n                  ? \"undefined\"\n                  : this.genericDataFilename\n        }\n      }\n      const defaultAudioStage = {\n        TranscribeVideo: {\n          Enabled: this.enabledOperators.includes(\"TranscribeVideo\"),\n          TranscribeLanguage: this.transcribeLanguage\n        }\n      }\n      const defaultTextStage = {\n        Translate: {\n          Enabled: this.enabledOperators.includes(\"Translate\"),\n          SourceLanguageCode: this.transcribeLanguage.split(\"-\")[0],\n          TargetLanguageCode: this.targetLanguageCode\n        },\n        ComprehendEntities: {\n          Enabled: this.enabledOperators.includes(\"ComprehendEntities\")\n        },\n        ComprehendKeyPhrases: {\n          Enabled: this.enabledOperators.includes(\"ComprehendKeyPhrases\")\n        }\n      }\n      if (this.ComprehendEncryption === true && this.kmsKeyId.length > 0) {\n        defaultTextStage[\"ComprehendEntities\"][\"KmsKeyId\"] = this.kmsKeyId\n        defaultTextStage[\"ComprehendKeyPhrases\"][\"KmsKeyId\"] = this.kmsKeyId\n      }\n      const defaultTextSynthesisStage = {\n        // Polly is available in the MIECompleteWorkflow but not used in the front-end, so we've disabled it here.\n        Polly: {\n          Enabled: false\n        }\n      }\n      const workflow_config = {\n        Name: \"CasVideoWorkflow\",\n      }\n      workflow_config[\"Configuration\"] = {}\n      workflow_config[\"Configuration\"][\"defaultPrelimVideoStage\"] = defaultPrelimVideoStage\n      workflow_config[\"Configuration\"][\"defaultVideoStage\"] = defaultVideoStage\n      workflow_config[\"Configuration\"][\"defaultAudioStage\"] = defaultAudioStage\n      workflow_config[\"Configuration\"][\"defaultTextStage\"] = defaultTextStage\n      workflow_config[\"Configuration\"][\"defaultTextSynthesisStage\"] = defaultTextSynthesisStage\n      return workflow_config\n    },\n    curlWorkflowExecution() {\n      // get curl command to request workflow execution\n      return 'awsscurl -X POST --region '+ this.AWS_REGION +' -H \"Content-Type: application/json\" --data \\''+JSON.stringify(this.workflowConfigWithInput)+'\\' '+this.WORKFLOW_API_ENDPOINT+'workflow/execution'\n    },\n    sample_file() {\n      if (this.curlWorkflow === \"Video\") {\n        return \"SAMPLE_VIDEO.MP4\"\n      }\n      else if (this.curlWorkflow === \"Image\") {\n        return \"SAMPLE_IMAGE.PNG\"\n      }\n    },\n    curlExecutionHistory() {\n      // get curl command to request execution history\n      return 'awscurl -X GET --region '+ this.AWS_REGION +' -H \"Content-Type: application/json\" '+this.WORKFLOW_API_ENDPOINT+'workflow/execution/asset/{asset_id}'\n    },\n    workflowConfigWithInput() {\n      // This function is just used to pretty print the rest api\n      // for workflow execution in a popup modal\n      let data = {}\n      if (this.curlWorkflow === \"Video\") {\n        data = JSON.parse(JSON.stringify(this.videoWorkflowConfig));\n        data[\"Name\"] = \"CasVideoWorkflow\"\n      }\n      else if (this.curlWorkflow === \"Image\") {\n        data = JSON.parse(JSON.stringify(this.imageWorkflowConfig));\n        data[\"Name\"] = \"CasImageWorkflow\"\n      }\n      data[\"Input\"] = {\n        \"Media\": {\n          \"Video\": {\n            \"S3Bucket\": this.DATAPLANE_BUCKET,\n            \"S3Key\": this.sample_file\n          }\n        }\n      }\n      return data\n    }\n  },\n  created: function() {\n    if (this.$route.query.asset) {\n      this.hasAssetParam = true;\n      this.assetIdParam = this.$route.query.asset;\n    }\n  },\n  mounted: function() {\n    this.executed_assets = this.execution_history;\n    this.pollWorkflowStatus();\n  },\n  beforeDestroy () {\n    clearInterval(this.workflow_status_polling)\n  },\n  methods: {\n    selectAll: function() {\n      this.enabledOperators = [\n        \"labelDetection\",\n        \"textDetection\",\n        \"celebrityRecognition\",\n        \"contentModeration\",\n        \"faceDetection\",\n        \"thumbnail\",\n        \"TranscribeVideo\",\n        \"Translate\",\n        \"ComprehendKeyPhrases\",\n        \"ComprehendEntities\",\n        \"technicalCueDetection\",\n        \"shotDetection\"\n      ];\n      console.log(this.enabledOperators)\n    },\n    clearAll: function() {\n      this.enabledOperators = [];\n    },\n    openWindow: function(url) {\n      window.open(url, \"noopener,noreferer\");\n    },\n    countDownChanged(dismissCountDown) {\n      this.dismissCountDown = dismissCountDown;\n    },\n    s3UploadError(error) {\n      console.log(error);\n      // display alert\n      this.uploadErrorMessage = error;\n      this.dismissCountDown = this.dismissSecs;\n    },\n    fileAdded: function( file )\n    {\n      let errorMessage = '';\n      if (!(file.type).match(/image\\/.+|video\\/.+|application\\/mxf|application\\/json/g)) {\n        if (file.type === \"\")\n          errorMessage = \"Unsupported file type: unknown\";\n        else\n          errorMessage = \"Unsupported file type: \" + file.type;\n        this.invalidFileMessages.push(errorMessage);\n        this.showInvalidFile = true\n      }\n    },\n    fileRemoved: function( file )\n    {\n      let errorMessage = '';\n      if (!(file.type).match(/image\\/.+|video\\/.+|application\\/mxf|application\\/json/g)) {\n        if (file.type === \"\")\n          errorMessage = \"Unsupported file type: unknown\";\n        else\n          errorMessage = \"Unsupported file type: \" + file.type;\n      }\n      this.invalidFileMessages = this.invalidFileMessages.filter(function(value){ return value != errorMessage})\n      if (this.invalidFileMessages.length === 0 ) this.showInvalidFile = false;\n    },\n    runWorkflow: async function(file) {\n      const vm = this;\n      let media_type = null;\n      let s3Key = null;\n      if (\"s3_key\" in file) {\n        media_type = file.type;\n        s3Key = file.s3_key; // add in public since amplify prepends that to all keys\n      } else {\n        media_type = this.$route.query.mediaType;\n        s3Key = this.$route.query.s3key.split(\"/\").pop();\n      }\n      if (this.hasAssetParam) {\n        if (media_type === \"video\") {\n          this.workflow_config = vm.videoWorkflowConfig;\n          this.workflow_config[\"Input\"] = { AssetId: this.assetIdParam, Media: { Video: {} } };\n        } else if (media_type === \"image\") {\n          this.workflow_config = vm.imageWorkflowConfig;\n          this.workflow_config[\"Input\"] = { AssetId: this.assetIdParam, Media: { Image: {} } };\n        } else {\n          vm.s3UploadError(\n              \"Unsupported media type, \" + this.$route.query.mediaType + \".\"\n          );\n        }\n      } else {\n        if (media_type.match(/image/g)) {\n          this.workflow_config = vm.imageWorkflowConfig;\n          this.workflow_config[\"Input\"] = {\n            Media: {\n              Image: {\n                S3Bucket: this.DATAPLANE_BUCKET,\n                S3Key: s3Key\n              }\n            }\n          }\n        } else if (\n            media_type.match(/video/g) || media_type === \"application/mxf\"\n        ) {\n          this.workflow_config = vm.videoWorkflowConfig;\n          this.workflow_config[\"Input\"] = {\n            Media: {\n              Video: {\n                S3Bucket: this.DATAPLANE_BUCKET,\n                S3Key: s3Key\n              }\n            }\n          };\n        } else if (media_type === \"application/json\") {\n          // JSON files may be uploaded for the genericDataLookup operator, but\n          // we won't run a workflow for json file types.\n          //console.log(\"Data file has been uploaded to s3://\" + location.s3ObjectLocation.fields.key);\n          return;\n        } else {\n          vm.s3UploadError(\"Unsupported media type: \" + media_type + \".\");\n        }\n      }\n      console.log(\"workflow execution configuration:\")\n      console.log(JSON.stringify(this.workflow_config))\n      let apiName = 'mieWorkflowApi'\n      let path = 'workflow/execution'\n      let requestOpts = {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        response: true,\n        body: this.workflow_config,\n        queryStringParameters: {} // optional\n      };\n      try {\n        let response = await this.$Amplify.API.post(apiName, path, requestOpts);\n        let asset_id = response.data.AssetId;\n        let wf_id = response.data.Id;\n        let executed_asset = {\n          asset_id: asset_id,\n          file_name: s3Key.replace('public/upload/', ''),\n          workflow_status: \"\",\n          state_machine_console_link: \"\",\n          wf_id: wf_id\n        };\n        vm.executed_assets.push(executed_asset);\n        vm.getWorkflowStatus(wf_id);\n        this.hasAssetParam = false;\n        this.assetIdParam = \"\";\n      } catch (error) {\n        console.log(\n            \"ERROR: Failed to start workflow. Check Workflow API logs.\"\n        );\n        console.log(error)\n      }\n    },\n    async getWorkflowStatus(wf_id) {\n      const vm = this;\n      let apiName = 'mieWorkflowApi'\n      let path =  \"workflow/execution/\" + wf_id\n      let requestOpts = {\n        headers: {},\n        response: true,\n        queryStringParameters: {} // optional\n      };\n      try {\n        let response = await this.$Amplify.API.get(apiName, path, requestOpts);\n        for (let i = 0; i < vm.executed_assets.length; i++) {\n          if (vm.executed_assets[i].wf_id === wf_id) {\n            vm.executed_assets[i].workflow_status = response.data.Status;\n            vm.executed_assets[i].state_machine_console_link =\n                \"https://\" + this.AWS_REGION + \".console.aws.amazon.com/states/home?region=\" + this.AWS_REGION + \"#/executions/details/\" + response.data.StateMachineExecutionArn;\n            break;\n          }\n        }\n        this.$store.commit(\"updateExecutedAssets\", vm.executed_assets);\n      } catch (error) {\n        console.log(\"ERROR: Failed to get workflow status\");\n        console.log(error)\n      }\n    },\n    pollWorkflowStatus() {\n      // Poll frequency in milliseconds\n      const poll_frequency = 5000;\n      this.workflow_status_polling = setInterval(() => {\n        this.executed_assets.forEach(item => {\n          if (\n              item.workflow_status === \"\" ||\n              item.workflow_status === \"Started\" ||\n              item.workflow_status === \"Queued\"\n          ) {\n            this.getWorkflowStatus(item.wf_id);\n          }\n        });\n      }, poll_frequency);\n    },\n    uploadFiles() {\n      console.log(\"Uploading to s3://\" + this.DATAPLANE_BUCKET,);\n      this.$refs.myVueDropzone.processQueue();\n    },\n    clearHistory() {\n      this.executed_assets = [];\n      this.$store.commit('updateExecutedAssets', this.executed_assets);\n\n    }\n  }\n}\n</script>\n<style>\ninput[type=text] {\n  width: 100%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  box-sizing: border-box;\n}\n\nlabel {\n  font-weight: bold;\n}\n\n.note {\n  color: red;\n  font-family: \"Courier New\"\n}\n</style>\n"]}]}
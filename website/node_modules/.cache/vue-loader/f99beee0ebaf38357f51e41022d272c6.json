{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/components/vue-dropzone.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/components/vue-dropzone.vue","mtime":1623875433282},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/css-loader/index.js","mtime":1633407346668},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1633407349521},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/postcss-loader/src/index.js","mtime":1633407348170},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi52dWUtZHJvcHpvbmUgewogIGJvcmRlcjogMnB4IHNvbGlkICNFNUU1RTU7CiAgZm9udC1mYW1pbHk6ICdBcmlhbCcsIHNhbnMtc2VyaWY7CiAgbGV0dGVyLXNwYWNpbmc6IDAuMnB4OwogIGNvbG9yOiAjNzc3OwogIHRyYW5zaXRpb246IC4ycyBsaW5lYXI7CiB9CgoudnVlLWRyb3B6b25lOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjZGNkY2Owp9CgoudnVlLWRyb3B6b25lID4gaSB7CiAgY29sb3I6ICNDQ0M7Cn0KCi52dWUtZHJvcHpvbmUgPiAuZHotcHJldmlldyAuZHotaW1hZ2UgewogIGJvcmRlci1yYWRpdXM6IDA7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwp9CgoudnVlLWRyb3B6b25lID4gLmR6LXByZXZpZXcgLmR6LWltYWdlIGltZzpub3QoW3NyY10pIHsKICB3aWR0aDogMjAwcHg7CiAgaGVpZ2h0OiAyMDBweDsKfQoKLnZ1ZS1kcm9wem9uZSA+IC5kei1wcmV2aWV3IC5kei1pbWFnZTpob3ZlciBpbWcgewogIHRyYW5zZm9ybTogbm9uZTsKICAtd2Via2l0LWZpbHRlcjogbm9uZTsKfQoKLnZ1ZS1kcm9wem9uZSA+IC5kei1wcmV2aWV3IC5kei1kZXRhaWxzIHsKICBib3R0b206IDA7CiAgdG9wOiAwOwogIGNvbG9yOiB3aGl0ZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDMzLCAxNTAsIDI0MywgMC44KTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4ycyBsaW5lYXI7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoKLnZ1ZS1kcm9wem9uZSA+IC5kei1wcmV2aWV3IC5kei1kZXRhaWxzIC5kei1maWxlbmFtZSB7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoKLnZ1ZS1kcm9wem9uZSA+IC5kei1wcmV2aWV3IC5kei1kZXRhaWxzIC5kei1maWxlbmFtZSBzcGFuLCAudnVlLWRyb3B6b25lID4gLmR6LXByZXZpZXcgLmR6LWRldGFpbHMgLmR6LXNpemUgc3BhbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7Cn0KCi52dWUtZHJvcHpvbmUgPiAuZHotcHJldmlldyAuZHotZGV0YWlscyAuZHotZmlsZW5hbWU6bm90KDpob3Zlcikgc3BhbiB7CiAgYm9yZGVyOiBub25lOwp9CgoudnVlLWRyb3B6b25lID4gLmR6LXByZXZpZXcgLmR6LWRldGFpbHMgLmR6LWZpbGVuYW1lOmhvdmVyIHNwYW4gewogIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OwogIGJvcmRlcjogbm9uZTsKfQoKLnZ1ZS1kcm9wem9uZSA+IC5kei1wcmV2aWV3IC5kei1wcm9ncmVzcyAuZHotdXBsb2FkIHsKICBiYWNrZ3JvdW5kOiAjY2NjY2NjOwp9CgoudnVlLWRyb3B6b25lID4gLmR6LXByZXZpZXcgLmR6LXJlbW92ZSAgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB6LWluZGV4OiAzMDsKICBjb2xvcjogd2hpdGU7CiAgbWFyZ2luLWxlZnQ6IDE1cHg7CiAgcGFkZGluZzogMTBweDsKICB0b3A6IGluaGVyaXQ7CiAgYm90dG9tOiAxNXB4OwogIGJvcmRlcjogMnB4IHdoaXRlIHNvbGlkOwogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogIGZvbnQtc2l6ZTogMC44cmVtOwogIGZvbnQtd2VpZ2h0OiA4MDA7CiAgbGV0dGVyLXNwYWNpbmc6IDEuMXB4OwogIG9wYWNpdHk6IDA7Cn0KCi52dWUtZHJvcHpvbmUgPiAuZHotcHJldmlldzpob3ZlciAuZHotcmVtb3ZlIHsKICBvcGFjaXR5OiAxOwp9CgoudnVlLWRyb3B6b25lID4gLmR6LXByZXZpZXcgLmR6LXN1Y2Nlc3MtbWFyaywgLnZ1ZS1kcm9wem9uZSA+IC5kei1wcmV2aWV3IC5kei1lcnJvci1tYXJrIHsKICBtYXJnaW4tbGVmdDogYXV0bzsKICBtYXJnaW4tdG9wOiBhdXRvOwogIHdpZHRoOiAxMDAlOwogIHRvcDogMzUlOwogIGxlZnQ6IDA7Cn0KCi52dWUtZHJvcHpvbmUgPiAuZHotcHJldmlldyAuZHotc3VjY2Vzcy1tYXJrIHN2ZywgLnZ1ZS1kcm9wem9uZSA+IC5kei1wcmV2aWV3IC5kei1lcnJvci1tYXJrIHN2ZyB7CiAgbWFyZ2luLWxlZnQ6IGF1dG87CiAgbWFyZ2luLXJpZ2h0OiBhdXRvOwp9CgoudnVlLWRyb3B6b25lID4gLmR6LXByZXZpZXcgLmR6LWVycm9yLW1lc3NhZ2UgewogIG1hcmdpbi1sZWZ0OiBhdXRvOwogIG1hcmdpbi1yaWdodDogYXV0bzsKICBsZWZ0OiAwOwogIHdpZHRoOiAxMDAlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQoKLnZ1ZS1kcm9wem9uZSA+IC5kei1wcmV2aWV3IC5kei1lcnJvci1tZXNzYWdlOmFmdGVyIHsKICBkaXNwbGF5OiBub25lOwp9Cgo="},{"version":3,"sources":["vue-dropzone.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+ZA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"vue-dropzone.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    :id=\"id\"\n    ref=\"dropzoneElement\"\n    :class=\"{ 'vue-dropzone dropzone': includeStyling }\"\n  >\n    <div\n      v-if=\"useCustomSlot\"\n      class=\"dz-message\"\n    >\n      <slot>Drop files here to upload</slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Dropzone from 'dropzone' //eslint-disable-line\n\nDropzone.autoDiscover = false\n\nexport default {\n  props: {\n    id: {\n      type: String,\n      required: true,\n      default:'dropzone'\n    },\n    options: {\n      type: Object,\n      required: true\n    },\n    includeStyling: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    awss3: {\n      type: Object,\n      required: false,\n      default: null\n    },\n    destroyDropzone: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    duplicateCheck: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    useCustomSlot: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  data() {\n    return {\n      isS3: false,\n      isS3OverridesServerPropagation: false,\n      wasQueueAutoProcess: true,\n    }\n  },\n  computed: {\n    dropzoneSettings() {\n      let defaultValues = {\n        thumbnailWidth: 200,\n        thumbnailHeight: 200\n      }\n      Object.keys(this.options).forEach(function(key) {\n        defaultValues[key] = this.options[key]\n      }, this)\n      if (this.awss3 !== null) {\n        defaultValues['autoProcessQueue'] = false\n        this.isS3 = true //eslint-disable-line\n        this.isS3OverridesServerPropagation = (this.awss3.sendFileToServer === false)  //eslint-disable-line\n        if (this.options.autoProcessQueue !== undefined)\n          this.wasQueueAutoProcess = this.options.autoProcessQueue //eslint-disable-line\n\n        if (this.isS3OverridesServerPropagation) {\n          defaultValues['url'] = (files) => {\n            return files[0].s3Url;\n          }\n        }\n      }\n      return defaultValues\n    }\n  },\n  mounted () {\n    if (this.$isServer && this.hasBeenMounted) {\n      return\n    }\n    this.hasBeenMounted = true\n\n    this.dropzone = new Dropzone(this.$refs.dropzoneElement, this.dropzoneSettings)\n    let vm = this\n\n    this.dropzone.on('thumbnail', function(file, dataUrl) {\n      vm.$emit('vdropzone-thumbnail', file, dataUrl)\n    })\n\n    this.dropzone.on('addedfile', function(file) {\n      if (vm.duplicateCheck) {\n        if (this.files.length) {\n          var _i, _len;\n          for (_i = 0, _len = this.files.length; _i < _len - 1; _i++) // -1 to exclude current file\n            {\n                if(this.files[_i].name === file.name && this.files[_i].size === file.size && this.files[_i].lastModifiedDate.toString() === file.lastModifiedDate.toString())\n                {\n                    this.removeFile(file);\n                    vm.$emit('vdropzone-duplicate-file', file)\n                }\n            }\n        }\n      }\n\n      vm.$emit('vdropzone-file-added', file)\n      if (vm.isS3 && vm.wasQueueAutoProcess && ! file.manuallyAdded) {\n        vm.getSignedAndUploadToS3(file);\n      }\n    })\n\n    this.dropzone.on('addedfiles', function(files) {\n      vm.$emit('vdropzone-files-added', files)\n    })\n\n    this.dropzone.on('removedfile', function(file) {\n      vm.$emit('vdropzone-removed-file', file)\n      if (file.manuallyAdded && vm.dropzone.options.maxFiles !== null) vm.dropzone.options.maxFiles++\n    })\n\n    this.dropzone.on('success', function(file, response) {\n      vm.$emit('vdropzone-success', file, response)\n      if (vm.isS3) {\n        if(vm.isS3OverridesServerPropagation){\n          var xmlResponse = (new window.DOMParser()).parseFromString(response, \"text/xml\");\n          var s3ObjectLocation = xmlResponse.firstChild.children[0].innerHTML;\n          vm.$emit('vdropzone-s3-upload-success', s3ObjectLocation);\n        }\n          if (vm.wasQueueAutoProcess)\n            vm.setOption('autoProcessQueue', false);\n      }\n    })\n\n    this.dropzone.on('successmultiple', function(file, response) {\n      vm.$emit('vdropzone-success-multiple', file, response)\n    })\n\n    this.dropzone.on('error', function(file, message, xhr) {\n      vm.$emit('vdropzone-error', file, message, xhr)\n      if (this.isS3)\n        vm.$emit('vdropzone-s3-upload-error');\n    })\n\n    this.dropzone.on('errormultiple', function(files, message, xhr) {\n      vm.$emit('vdropzone-error-multiple', files, message, xhr)\n    })\n    delete this.dropzone['submitRequest'];\n    this.dropzone.submitRequest = function() {\n      // Dropzone's xhr formatted upload request has been\n      // replaced by an Amplify API call, so we're overriding\n      // submitRequest here in order to skip Dropzone's xhr request.\n    };\n\n    this.dropzone.on('sendingmultiple', function(file, xhr, formData) {\n      vm.$emit('vdropzone-sending-multiple', file, xhr, formData)\n    })\n\n    this.dropzone.on('complete', function(file) {\n      vm.$emit('vdropzone-complete', file)\n    })\n\n    this.dropzone.on('completemultiple', function(files) {\n      vm.$emit('vdropzone-complete-multiple', files)\n    })\n\n    this.dropzone.on('canceled', function(file) {\n      vm.$emit('vdropzone-canceled', file)\n    })\n\n    this.dropzone.on('canceledmultiple', function(files) {\n      vm.$emit('vdropzone-canceled-multiple', files)\n    })\n\n    this.dropzone.on('maxfilesreached', function(files) {\n      vm.$emit('vdropzone-max-files-reached', files)\n    })\n\n    this.dropzone.on('maxfilesexceeded', function(file) {\n      vm.$emit('vdropzone-max-files-exceeded', file)\n    })\n\n    this.dropzone.on('processing', function(file) {\n      vm.$emit('vdropzone-processing', file)\n    })\n\n    this.dropzone.on('processingmultiple', function(files) {\n      vm.$emit('vdropzone-processing-multiple', files)\n    })\n\n    this.dropzone.on('uploadprogress', function(file, progress, bytesSent) {\n      vm.$emit('vdropzone-upload-progress', file, progress, bytesSent)\n    })\n\n    this.dropzone.on('totaluploadprogress', function(totaluploadprogress, totalBytes, totalBytesSent) {\n      vm.$emit('vdropzone-total-upload-progress', totaluploadprogress, totalBytes, totalBytesSent)\n    })\n\n    this.dropzone.on('reset', function() {\n      vm.$emit('vdropzone-reset')\n    })\n\n    this.dropzone.on('queuecomplete', function() {\n      vm.$emit('vdropzone-queue-complete')\n    })\n\n    this.dropzone.on('drop', function(event) {\n      vm.$emit('vdropzone-drop', event)\n    })\n\n    this.dropzone.on('dragstart', function(event) {\n      vm.$emit('vdropzone-drag-start', event)\n    })\n\n    this.dropzone.on('dragend', function(event) {\n      vm.$emit('vdropzone-drag-end', event)\n    })\n\n    this.dropzone.on('dragenter', function(event) {\n      vm.$emit('vdropzone-drag-enter', event)\n    })\n\n    this.dropzone.on('dragover', function(event) {\n      vm.$emit('vdropzone-drag-over', event)\n    })\n\n    this.dropzone.on('dragleave', function(event) {\n      vm.$emit('vdropzone-drag-leave', event)\n    })\n\n    vm.$emit('vdropzone-mounted')\n  },\n  beforeDestroy() {\n    if (this.destroyDropzone) this.dropzone.destroy()\n  },\n  methods: {\n    manuallyAddFile: function(file, fileUrl) {\n      file.manuallyAdded = true\n      this.dropzone.emit(\"addedfile\", file)\n      let containsImageFileType = false\n      if (fileUrl.indexOf('.svg') > -1 || fileUrl.indexOf('.png') > -1 || fileUrl.indexOf('.jpg') > -1 || fileUrl.indexOf('.jpeg') > -1 || fileUrl.indexOf('.gif') > -1) containsImageFileType = true\n      if (this.dropzone.options.createImageThumbnails && containsImageFileType && file.size <= this.dropzone.options.maxThumbnailFilesize * 1024 * 1024) {\n        fileUrl && this.dropzone.emit(\"thumbnail\", file, fileUrl);\n\n        var thumbnails = file.previewElement.querySelectorAll('[data-dz-thumbnail]');\n        for (var i = 0; i < thumbnails.length; i++) {\n          thumbnails[i].style.width = this.dropzoneSettings.thumbnailWidth + 'px';\n          thumbnails[i].style.height = this.dropzoneSettings.thumbnailHeight + 'px';\n          thumbnails[i].style['object-fit'] = 'contain';\n        }\n      }\n      this.dropzone.emit(\"complete\", file)\n      if (this.dropzone.options.maxFiles) this.dropzone.options.maxFiles--\n      this.dropzone.files.push(file)\n      this.$emit('vdropzone-file-added-manually', file)\n    },\n    setOption: function(option, value) {\n      this.dropzone.options[option] = value\n    },\n    removeAllFiles: function(bool) {\n      this.dropzone.removeAllFiles(bool)\n    },\n    processQueue: function() {\n      const vm = this;\n      let dropzoneEle = this.dropzone;\n      this.$emit('vdropzone-sending')\n      if (this.isS3 && !this.wasQueueAutoProcess) {\n        this.getQueuedFiles().forEach((file) => {\n          this.getSignedAndUploadToS3(file);\n        });\n      } else {\n        this.dropzone.processQueue();\n      }\n      this.dropzone.on(\"success\", function(file) {\n        dropzoneEle.options.autoProcessQueue = true\n        vm.$emit('success', file)\n      });\n      this.dropzone.on('queuecomplete', function() {\n        dropzoneEle.options.autoProcessQueue = false\n        vm.$emit('vdropzone-queue-complete')\n      });\n      this.dropzone.on('removedfile', function(file) {\n        if (this.getFilesWithStatus().length === 0) {\n          vm.$emit('vdropzone-queue-complete')\n        }\n        vm.$Amplify.Storage.cancel(file.send_promise, \"The user canceled this upload.\");\n      });\n\n    },\n    init: function() {\n      return this.dropzone.init();\n    },\n    destroy: function() {\n      return this.dropzone.destroy();\n    },\n    updateTotalUploadProgress: function() {\n      return this.dropzone.updateTotalUploadProgress();\n    },\n    getFallbackForm: function() {\n      return this.dropzone.getFallbackForm();\n    },\n    getExistingFallback: function() {\n      return this.dropzone.getExistingFallback();\n    },\n    setupEventListeners: function() {\n      return this.dropzone.setupEventListeners();\n    },\n    removeEventListeners: function() {\n      return this.dropzone.removeEventListeners();\n    },\n    disable: function() {\n      return this.dropzone.disable();\n    },\n    enable: function() {\n      return this.dropzone.enable();\n    },\n    filesize: function(size) {\n      return this.dropzone.filesize(size);\n    },\n    accept: function(file, done) {\n      return this.dropzone.accept(file, done);\n    },\n    addFile: function(file) {\n      return this.dropzone.addFile(file);\n    },\n    removeFile: function(file) {\n      this.dropzone.removeFile(file)\n    },\n    getAcceptedFiles: function() {\n      return this.dropzone.getAcceptedFiles()\n    },\n    getRejectedFiles: function() {\n      return this.dropzone.getRejectedFiles()\n    },\n    getFilesWithStatus: function() {\n      return this.dropzone.getFilesWithStatus()\n    },\n    getQueuedFiles: function() {\n      return this.dropzone.getQueuedFiles()\n    },\n    getUploadingFiles: function() {\n      return this.dropzone.getUploadingFiles()\n    },\n    getAddedFiles: function() {\n      return this.dropzone.getAddedFiles()\n    },\n    getActiveFiles: function() {\n      return this.dropzone.getActiveFiles()\n    },\n    async getSignedAndUploadToS3(file) {\n      let key = 'upload/' + file.name\n      let vm = this\n      this.dropzone.emit(\"processing\", file);\n      file.status = this.dropzone.UPLOADING;\n      file.processing = true;\n      let promise = null;\n      try {\n        promise = this.$Amplify.Storage.put(key, file, {\n          level: 'public',\n          // Not actually public in the S3 sense, this is just an Amplify construct.\n          // Public makes this file accessible by all the authenticated users of this\n          // app. Files are stored under the public/ path of the dataplane S3 bucket.\n          progressCallback(progress) {\n            vm.isUploading = true\n            vm.uploadValue = 0\n            const totalUploadProgress = (progress.loaded / progress.total) * 100\n            const bytesSent = progress.loaded\n            file.send_promise = promise\n            vm.dropzone.emit(\n                \"uploadprogress\",\n                file,\n                totalUploadProgress,\n                bytesSent\n            );\n          },\n        })\n        await promise;\n        promise.then((response) => {\n          // Amplify upload returns a {key: S3 Object key} object on success.\n          // We use that to determine whether upload was successful:\n          if (response.key !== undefined) {\n            console.log(\"upload complete\")\n            file.s3_key = \"public/\"+response.key\n            vm.dropzone.emit(\"success\", file);\n            vm.dropzone.emit(\"complete\", file);\n            vm.dropzone.emit(\"vdropzone-s3-upload-success\", \"upload success\");\n          } else {\n            vm.dropzone.emit('vdropzone-s3-upload-error', \"upload error\");\n          }\n        })\n      } catch (err) {\n        console.log(\"Error: \" + err)\n        // file.status = vm.dropzone.SUCCESS;\n        vm.isUploading = null\n        vm.uploadValue = null\n        vm.file = null\n      }\n    },\n  }\n}\n\n</script>\n\n<style>\n  .vue-dropzone {\n    border: 2px solid #E5E5E5;\n    font-family: 'Arial', sans-serif;\n    letter-spacing: 0.2px;\n    color: #777;\n    transition: .2s linear;\n   }\n\n  .vue-dropzone:hover {\n    background-color: #F6F6F6;\n  }\n\n  .vue-dropzone > i {\n    color: #CCC;\n  }\n\n  .vue-dropzone > .dz-preview .dz-image {\n    border-radius: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  .vue-dropzone > .dz-preview .dz-image img:not([src]) {\n    width: 200px;\n    height: 200px;\n  }\n\n  .vue-dropzone > .dz-preview .dz-image:hover img {\n    transform: none;\n    -webkit-filter: none;\n  }\n\n  .vue-dropzone > .dz-preview .dz-details {\n    bottom: 0;\n    top: 0;\n    color: white;\n    background-color: rgba(33, 150, 243, 0.8);\n    transition: opacity .2s linear;\n    text-align: left;\n  }\n\n  .vue-dropzone > .dz-preview .dz-details .dz-filename {\n    overflow: hidden;\n  }\n\n  .vue-dropzone > .dz-preview .dz-details .dz-filename span, .vue-dropzone > .dz-preview .dz-details .dz-size span {\n    background-color: transparent;\n  }\n\n  .vue-dropzone > .dz-preview .dz-details .dz-filename:not(:hover) span {\n    border: none;\n  }\n\n  .vue-dropzone > .dz-preview .dz-details .dz-filename:hover span {\n    background-color: transparent;\n    border: none;\n  }\n\n  .vue-dropzone > .dz-preview .dz-progress .dz-upload {\n    background: #cccccc;\n  }\n\n  .vue-dropzone > .dz-preview .dz-remove  {\n    position: absolute;\n    z-index: 30;\n    color: white;\n    margin-left: 15px;\n    padding: 10px;\n    top: inherit;\n    bottom: 15px;\n    border: 2px white solid;\n    text-decoration: none;\n    text-transform: uppercase;\n    font-size: 0.8rem;\n    font-weight: 800;\n    letter-spacing: 1.1px;\n    opacity: 0;\n  }\n\n  .vue-dropzone > .dz-preview:hover .dz-remove {\n    opacity: 1;\n  }\n\n  .vue-dropzone > .dz-preview .dz-success-mark, .vue-dropzone > .dz-preview .dz-error-mark {\n    margin-left: auto;\n    margin-top: auto;\n    width: 100%;\n    top: 35%;\n    left: 0;\n  }\n\n  .vue-dropzone > .dz-preview .dz-success-mark svg, .vue-dropzone > .dz-preview .dz-error-mark svg {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .vue-dropzone > .dz-preview .dz-error-message {\n    margin-left: auto;\n    margin-right: auto;\n    left: 0;\n    width: 100%;\n    text-align: center;\n  }\n\n  .vue-dropzone > .dz-preview .dz-error-message:after {\n    display: none;\n  }\n\n</style>\n"]}]}
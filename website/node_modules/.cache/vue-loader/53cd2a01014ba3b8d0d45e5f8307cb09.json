{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/views/Analysis.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/views/Analysis.vue","mtime":1631161961616},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/css-loader/index.js","mtime":1633407346668},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1633407349521},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/postcss-loader/src/index.js","mtime":1633407348170},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiAgI2FwcCB7CiAgICBmb250LWZhbWlseTogJ0F2ZW5pcicsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICB9CgogIC5tZWRpYVN1bW1hcnkgewogICAgdGV4dC1hbGlnbjogbGVmdDsKICB9CgogIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDgwMHB4KSB7CiAgLmRhdGFDb2x1bW5zIHsKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTsKICB9Cn0KCg=="},{"version":3,"sources":["Analysis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4WA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Analysis.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <Header />\n    <b-container fluid>\n      <b-alert\n        v-model=\"showElasticSearchAlert\"\n        variant=\"danger\"\n        dismissible\n      >\n        Elasticsearch server denied access. Please check its access policy.\n      </b-alert>\n      <b-row class=\"dataColumns\">\n        <b-col>\n          <div>\n            <b-row align-h=\"center\">\n              <b-tabs\n                content-class=\"mt-3\"\n                fill\n              >\n                <b-tab\n                  title=\"ML Vision\"\n                  active\n                  @click=\"currentView = 'LabelObjects'; mlTabs = 0\"\n                >\n                  <b-container fluid>\n                    <b-row>\n                      <div>\n                        <b-tabs\n                          v-model=\"mlTabs\"\n                          content-class=\"mt-3\"\n                          fill\n                        >\n                          <b-tab\n                            title=\"Objects\"\n                            @click=\"currentView = 'LabelObjects'\"\n                          />\n                          <b-tab\n                            title=\"Celebrities\"\n                            @click=\"currentView = 'Celebrities'\"\n                          />\n                          <b-tab\n                            title=\"Moderation\"\n                            @click=\"currentView = 'ContentModeration'\"\n                          />\n                          <b-tab\n                            title=\"Faces\"\n                            @click=\"currentView = 'FaceDetection'\"\n                          />\n                          <b-tab\n                            title=\"Words\"\n                            @click=\"currentView = 'TextDetection'\"\n                          />\n                          <b-tab\n                            v-if=\"mediaType !== 'image'\"\n                            title=\"Cues\"\n                            @click=\"currentView = 'TechnicalCues'\"\n                          />\n                          <b-tab\n                            v-if=\"mediaType !== 'image'\"\n                            title=\"Shots\"\n                            @click=\"currentView = 'ShotDetection'\"\n                          />\n                        </b-tabs>\n                      </div>\n                    </b-row>\n                  </b-container>\n                </b-tab>\n                <b-tab\n                  v-if=\"mediaType !== 'image'\"\n                  title=\"Speech Recognition\"\n                  @click=\"currentView = 'Transcript'; speechTabs = 0\"\n                >\n                  <b-tabs\n                    v-model=\"speechTabs\"\n                    content-class=\"mt-3\"\n                    fill\n                  >\n                    <b-tab\n                      title=\"Transcript\"\n                      @click=\"currentView = 'Transcript'\"\n                    />\n                    <b-tab\n                      title=\"Translation\"\n                      @click=\"currentView = 'Translation'\"\n                    />\n                    <b-tab\n                      title=\"KeyPhrases\"\n                      @click=\"currentView = 'KeyPhrases'\"\n                    />\n                    <b-tab\n                      title=\"Entities\"\n                      @click=\"currentView = 'Entities'\"\n                    />\n                  </b-tabs>\n                </b-tab>\n              </b-tabs>\n            </b-row>\n          </div>\n          <div>\n            <keep-alive>\n              <component :is=\"currentView\" :mediaType=\"mediaType\">\n                <!-- inactive components will be cached! -->\n              </component>\n            </keep-alive>\n          </div>\n        </b-col>\n        <b-col>\n          <div v-if=\"mediaType === 'image'\">\n            <!-- TODO: rename videoOptions since its not always a video -->\n            <div v-if=\"videoOptions.sources[0].src === ''\">\n              <Loading />\n            </div>\n            <div v-else>\n              <ImageFeature :options=\"videoOptions\" />\n            </div>\n          </div>\n          <div v-else>\n            <div v-if=\"videoOptions.sources[0].src === ''\">\n              <Loading />\n            </div>\n            <div v-else>\n              <VideoPlayer :options=\"videoOptions\" />\n              <div v-if=\"currentView === 'ShotDetection'\">\n                <br>\n              </div>\n              <div v-else-if=\"currentView === 'TechnicalCues'\">\n                <br>\n              </div>\n              <div v-else>\n                <LineChart />\n              </div>\n            </div>\n          </div>\n          <div>\n            <b-row class=\"mediaSummary\">\n              <MediaSummaryBox\n                :s3Uri=\"s3_uri\"\n                :filename=\"filename\"\n                :videoUrl=\"videoOptions.sources[0].src\"\n                :mediaType=\"mediaType\"\n              />\n            </b-row>\n          </div>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\n  import Header from '@/components/Header.vue'\n  import VideoPlayer from '@/components/VideoPlayer.vue'\n  import ImageFeature from '@/components/ImageFeature.vue'\n  import Loading from '@/components/Loading.vue'\n  import ComponentLoadingError from '@/components/ComponentLoadingError.vue'\n  import MediaSummaryBox from '@/components/MediaSummaryBox.vue'\n  import LineChart from '@/components/LineChart.vue'\n  import { mapState } from 'vuex'\n\n  export default {\n    name: 'Home',\n    components: {\n      Header,\n      ComponentLoadingError,\n      MediaSummaryBox,\n      Loading,\n      VideoPlayer,\n      ImageFeature,\n      LineChart,\n      LabelObjects: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/LabelObjects.vue'));\n        }, 1000);\n        }),\n        loading: Loading\n      }),\n\n      Celebrities: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/Celebrities.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n      }),\n      TextDetection: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/TextDetection.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n      }),\n      TechnicalCues: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/TechnicalCues.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n      }),\n      ShotDetection: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/ShotDetection.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n      }),\n      ContentModeration: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/ContentModeration.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n      }),\n      Transcript: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/Transcript.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n      }),\n      Translation: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/Translation.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n      }),\n      FaceDetection: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/FaceDetection.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n      }),\n      Entities: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/ComprehendEntities.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n      }),\n      KeyPhrases: () => ({\n        component: new Promise(function(resolve) {\n          setTimeout(function() {\n            resolve(import('@/components/ComprehendKeyPhrases.vue'));\n        }, 1000);\n        }),\n        loading: Loading,\n        error: ComponentLoadingError\n      })\n    },\n    data: function () {\n      return {\n        s3_uri: '',\n        filename: '',\n        currentView: 'LabelObjects',\n        showElasticSearchAlert: false,\n        mlTabs: 0,\n        speechTabs: 0,\n        videoLoaded: false,\n        supportedImageFormats: [\"jpg\", \"jpeg\", \"tif\", \"tiff\", \"png\", \"gif\"],\n        mediaType: \"\",\n        videoOptions: {\n          preload: 'auto',\n          loop: true,\n          controls: true,\n          sources: [\n            {\n              src: \"\",\n              type: \"video/mp4\"\n            }\n          ]\n        }\n      }\n    },\n    computed: {\n      ...mapState(['Confidence'])\n    },\n    created() {\n          this.getAssetMetadata();\n      },\n    methods: {\n      async getAssetMetadata () {\n        let asset_id = this.$route.params.asset_id;\n        let apiName = 'mieDataplaneApi';\n        let path = 'metadata/' + asset_id;\n        let requestOpts = {\n          response: true,\n        };\n        try {\n          let response = await this.$Amplify.API.get(apiName, path, requestOpts);\n          this.s3_uri = 's3://'+response.data.results.S3Bucket+'/'+response.data.results.S3Key;\n          let filename = this.s3_uri.split(\"/\").pop();\n          let fileType = filename.split('.').slice(-1)[0]\n          if (this.supportedImageFormats.includes(fileType.toLowerCase()) ) {\n            this.mediaType = \"image\"\n          } else {\n            this.mediaType = \"video\"\n          }\n          this.filename = filename;\n          this.getVideoUrl()\n        } catch (error) {\n          alert(error)\n          console.log(error)\n        }\n        this.updateAssetId();\n      },\n      async getVideoUrl() {\n        // This function gets the video URL then initializes the video player\n        const bucket = this.s3_uri.split(\"/\")[2];\n        // TODO: Get the path to the proxy mp4 from the mediaconvert operator - clarifying this comment, this should just be a from the dataplane results of the mediaconvert operator\n        // Our mediaconvert operator sets proxy encode filename to [key]_proxy.mp4\n        let key=\"\";\n        if (this.mediaType === \"image\") {\n          key = this.s3_uri.split(this.s3_uri.split(\"/\")[2] + '/')[1];\n        }\n        if (this.mediaType === \"video\") {\n          const dataplane_bucket = this.s3_uri.split(\"/\")[2]\n          const input_media_key = this.s3_uri.split(dataplane_bucket)[1]\n          const input_media_key_delimited = input_media_key.split(\"/\")\n          const media_filename = input_media_key_delimited[input_media_key_delimited.length - 1]\n          const proxy_encode_filename = (media_filename.split(\".\").slice(0,-1).join('.') + \"_proxy.mp4\").replace(\"/\", \"\");\n\n          const proxy_encode_key = 'private/assets/' + this.$route.params.asset_id + '/' + proxy_encode_filename\n          key = proxy_encode_key\n        }\n        const data = { \"S3Bucket\": bucket, \"S3Key\": key };\n\n        // get presigned URL to video file in S3\n        let apiName = 'mieDataplaneApi'\n        let path = 'download'\n        let requestOpts = {\n          headers: {\n          },\n          body: data,\n          response: true,\n          queryStringParameters: {}, // optional,\n          responseType: 'text'\n        };\n        try {\n          let response = await this.$Amplify.API.post(apiName, path, requestOpts);\n          this.videoOptions.sources[0].src = response.data\n          this.videoLoaded = true\n        } catch (error) {\n          alert(error)\n        }\n      },\n    updateAssetId () {\n      this.$store.commit('updateAssetId', this.$route.params.asset_id);\n      }\n    }\n  }\n</script>\n\n<style>\n  #app {\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  .mediaSummary {\n    text-align: left;\n  }\n\n  @media screen and (max-width: 800px) {\n  .dataColumns {\n    flex-direction: column-reverse;\n  }\n}\n\n</style>\n"]}]}
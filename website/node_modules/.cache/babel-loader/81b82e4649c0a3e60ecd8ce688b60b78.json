{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/thread-loader/dist/cjs.js!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/components/FaceDetection.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/components/FaceDetection.vue","mtime":1637348724761},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/thread-loader/dist/cjs.js","mtime":1633407346686},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js","mtime":1633407348173},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["FaceDetection.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <b-container fluid>\n    <b-col>\n      <b-row\n        align-h=\"center\"\n        class=\"my-1\"\n      >\n        <div class=\"wrapper\">\n          Confidence Threshold<br>\n          <input\n            type=\"range\"\n            value=\"90\"\n            min=\"55\"\n            max=\"99\"\n            step=\"1\"\n            @click=\"updateConfidence\"\n          >\n          {{ Confidence }}%<br>\n        </div>\n      </b-row>\n      <div v-if=\"lowerConfidence === true\">\n        {{ lowerConfidenceMessage }}\n      </div>\n      <div\n        v-if=\"isBusy\"\n        class=\"wrapper\"\n      >\n        <Loading />\n      </div>\n      <b-row\n        align-h=\"center\"\n        class=\"my-1\"\n      >\n        <div class=\"wrapper\">\n          <br>\n          <template v-for=\"label in sorted_unique_labels\">\n            <template v-if=\"boxes_available.includes(label[0])\">\n              <!-- Show darker button outline if boxes are available for the label -->\n              <b-button\n                v-b-tooltip.hover\n                variant=\"outline-dark\"\n                :title=\"label[1]\"\n                size=\"sm\"\n                pill\n                @click=\"updateMarkers(label[0])\"\n              >\n                {{ label[0]+\"*\" }}\n              </b-button> &nbsp;\n            </template>\n            <template v-else>\n              <b-button\n                v-b-tooltip.hover\n                variant=\"outline-secondary\"\n                :title=\"label[1]\"\n                size=\"sm\"\n                pill\n                @click=\"updateMarkers(label[0])\"\n              >\n                {{ label[0] }}\n              </b-button> &nbsp;\n            </template>\n          </template>\n        </div>\n      </b-row>\n      <b-row\n        align-h=\"center\"\n        class=\"my-1\"\n      >\n        <div\n          v-if=\"isBusy === false\"\n          class=\"wrapper\"\n        >\n          <br><p class=\"text-muted\">\n            ({{ count_labels }} identified objects, {{ count_distinct_labels }} unique)\n          </p>\n          <hr>\n          <p class=\"text-muted\">\n            * Indicates bounding boxes are available.\n          </p>\n        </div>\n      </b-row>\n    </b-col>\n    <b-button\n      type=\"button\"\n      @click=\"saveFile()\"\n    >\n      Download Data\n    </b-button>\n    <br>\n    <b-button\n        :pressed=\"false\"\n        size=\"sm\"\n        variant=\"link\"\n        class=\"text-decoration-none\"\n        @click=\"showElasticsearchApiRequest = true\"\n    >\n      Show API request to get these results\n    </b-button>\n    <b-modal\n        v-model=\"showElasticsearchApiRequest\"\n        scrollable\n        title=\"SEARCH API\"\n        ok-only\n    >\n      <label>Request URL:</label>\n      <pre v-highlightjs><code class=\"bash\">GET {{ SEARCH_ENDPOINT }}workflow/execution</code></pre>\n      <label>Search query:</label>\n      <pre v-highlightjs=\"JSON.stringify(searchQuery)\"><code class=\"json\"></code></pre>\n      <label>Sample command:</label>\n      <pre v-highlightjs=\"curlCommand\"><code class=\"bash\"></code></pre>\n    </b-modal>\n  </b-container>\n</template>\n\n<script>\n  import Loading from '@/components/Loading.vue'\n  import { mapState } from 'vuex'\n\n  export default {\n    name: \"FaceDetection\",\n    components: {\n      Loading\n    },\n    props: {\n      mediaType: {\n        type: String,\n        default: \"\"\n      },\n    },\n    data() {\n      return {\n        curlCommand: '',\n        searchQuery: '',\n        showElasticsearchApiRequest: false,\n        Confidence: 90,\n        high_confidence_data: [],\n        elasticsearch_data: [],\n        count_distinct_labels: 0,\n        count_labels: 0,\n        isBusy: false,\n        operator: 'face_detection',\n        canvasRefreshInterval: undefined,\n        timeseries: new Map(),\n        selectedLabel: '',\n        boxes_available: [],\n        lowerConfidence: false,\n        lowerConfidenceMessage: 'Try lowering confidence threshold'\n      }\n    },\n    computed: {\n      ...mapState(['player']),\n      sorted_unique_labels() {\n        // This function sorts and counts unique labels for mouse over events on label buttons\n        const es_data = this.elasticsearch_data;\n        const unique_labels = new Map();\n        // sort and count unique labels for label mouse over events\n        es_data.forEach(function (record) {\n          unique_labels.set(record.Name, unique_labels.get(record.Name) ? unique_labels.get(record.Name) + 1 : 1);\n          if (record.BoundingBox) {\n            // Save this label name to a list of labels that have bounding boxes\n            this.saveBoxedLabel(record.Name)\n          }\n        }.bind(this));\n        const sorted_unique_labels = new Map([...unique_labels.entries()].slice().sort((a, b) => b[1] - a[1]));\n        // If Elasticsearch returned undefined labels then delete them:\n        sorted_unique_labels.delete(undefined);\n        this.countLabels(sorted_unique_labels.size, es_data.length);\n        return sorted_unique_labels\n      }\n    },\n    watch: {\n      // These watches update the line chart\n      selectedLabel: function() {\n        this.chartData();\n      },\n      elasticsearch_data: function() {\n        this.chartData();\n      },\n    },\n    deactivated: function () {\n      console.log('activated component:', this.operator);\n      this.boxes_available = [];\n      this.selectedLabel = '';\n      clearInterval(this.canvasRefreshInterval);\n      const canvas = document.getElementById('canvas');\n      let ctx;\n      if (canvas) ctx = canvas.getContext('2d');\n      if (ctx) ctx.clearRect(0, 0, canvas.width, canvas.height);\n    },\n    activated: function () {\n      console.log('activated component:', this.operator);\n      this.fetchAssetData();\n    },\n    mounted: function() {\n      this.getCurlCommand();\n    },\n    beforeDestroy: function () {\n      this.high_confidence_data = [];\n      this.elasticsearch_data = [];\n      this.count_distinct_labels = 0;\n      this.count_labels = 0;\n    },\n    methods: {\n      getCurlCommand() {\n        this.searchQuery = 'AssetId:'+this.$route.params.asset_id+' Confidence:>'+this.Confidence+' Operator:'+this.operator;\n        // get curl command to search elasticsearch\n        this.curlCommand = 'awscurl -X GET --profile default --service es --region ' + this.AWS_REGION + ' \\'' + this.SEARCH_ENDPOINT + '/_search?q=' + encodeURIComponent(this.searchQuery) + '\\''\n      },\n      async fetchAssetData () {\n          let apiName = 'contentAnalysisElasticsearch';\n          let path = '/_search';\n          let apiParams = {\n            headers: {'Content-Type': 'application/json'},\n            queryStringParameters: {'q': this.searchQuery, 'default_operator': 'AND', 'size': 10000}\n          };\n          let response = await this.$Amplify.API.get(apiName, path, apiParams);\n          if (!response) {\n            this.showElasticSearchAlert = true\n          }\n          else {\n            let result = await response;\n            let data = result.hits.hits;\n            let es_data = [];\n            if (data.length === 0 && this.Confidence > 55) {\n              this.lowerConfidence = true;\n              this.lowerConfidenceMessage = 'Try lowering confidence threshold'\n            } else {\n              this.lowerConfidence = false;\n              for (let i = 0, len = data.length; i < len; i++) {\n                let item = data[i]._source;\n                if (\"Emotions\" in item) {\n                  for (let emotion = 0, emotionsLen = item.Emotions.length; emotion < emotionsLen; emotion++) {\n                    if (item.Emotions[emotion].Confidence >= this.Confidence) {\n                      es_data.push({\"Name\": item.Emotions[emotion].Type, \"Timestamp\": item.Timestamp})\n                    }\n                  }\n                }\n                if (\"Beard\" in item) {\n                  if (item.Beard.Confidence > this.Confidence) {\n                    es_data.push({\"Name\": \"Beard\", \"Timestamp\": item.Timestamp})\n                  }\n                }\n                if (\"Eyeglasses\" in item) {\n                  if (item.Eyeglasses.Confidence > this.Confidence) {\n                    es_data.push({\"Name\": \"Eyeglasses\", \"Timestamp\": item.Timestamp})\n                  }\n                }\n                if (\"EyesOpen\" in item) {\n                  if (item.EyesOpen.Confidence > this.Confidence) {\n                    es_data.push({\"Name\": \"EyesOpen\", \"Timestamp\": item.Timestamp})\n                  }\n                }\n                if (\"MouthOpen\" in item) {\n                  if (item.MouthOpen.Confidence > this.Confidence) {\n                    es_data.push({\"Name\": \"MouthOpen\", \"Timestamp\": item.Timestamp})\n                  }\n                }\n                if (\"Mustache\" in item) {\n                  if (item.Mustache.Confidence > this.Confidence) {\n                    es_data.push({\"Name\": \"Mustache\", \"Timestamp\": item.Timestamp})\n                  }\n                }\n                if (\"Smile\" in item) {\n                  if (item.Smile.Confidence > this.Confidence) {\n                    es_data.push({\"Name\": \"Smile\", \"Timestamp\": item.Timestamp})\n                  }\n                }\n                if (\"Sunglasses\" in item) {\n                  if (item.Sunglasses.Confidence > this.Confidence) {\n                    es_data.push({\"Name\": \"Sunglasses\", \"Timestamp\": item.Timestamp})\n                  }\n                }\n                if (\"Gender\" in item) {\n                  es_data.push({\"Name\": item.Gender.Value, \"Timestamp\": item.Timestamp})\n                }\n                if (\"BoundingBox\" in item) {\n                  es_data.push({\n                    \"Name\": \"Face\",\n                    \"Timestamp\": item.Timestamp,\n                    \"Confidence\": item.Confidence,\n                    \"BoundingBox\": {\n                      \"Width\": item.BoundingBox.Width,\n                      \"Height\": item.BoundingBox.Height,\n                      \"Left\": item.BoundingBox.Left,\n                      \"Top\": item.BoundingBox.Top\n                    }\n                  })\n                }\n              }\n            }\n            this.elasticsearch_data = JSON.parse(JSON.stringify(es_data));\n            this.isBusy = false\n        }\n      },\n      saveBoxedLabel(label_name) {\n        if (!this.boxes_available.includes(label_name)) {\n          this.boxes_available.push(label_name);\n        }\n      },\n      countLabels(unique_count, total_count) {\n        this.count_distinct_labels = unique_count;\n        this.count_labels = total_count;\n      },\n      saveFile() {\n        const elasticsearch_data = JSON.stringify(this.elasticsearch_data);\n        const blob = new Blob([elasticsearch_data], {type: 'text/plain'});\n        const e = document.createEvent('MouseEvents'),\n          a = document.createElement('a');\n        a.download = \"data.json\";\n        a.href = window.URL.createObjectURL(blob);\n        a.dataset.downloadurl = ['text/json', a.download, a.href].join(':');\n        e.initEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        a.dispatchEvent(e);\n      },\n      updateConfidence (event) {\n        this.isBusy = true;\n        this.Confidence = event.target.value;\n        if (this.mediaType === \"video\") {\n          // redraw markers on video timeline\n          this.player.markers.removeAll();\n        }\n        this.getCurlCommand()\n        this.fetchAssetData()\n      },\n      // updateMarkers updates markers in the video player and is called when someone clicks on a label button\n      updateMarkers (label) {\n        // clear canvas for redrawing\n        this.boxes_available = [];\n        clearInterval(this.canvasRefreshInterval);\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.strokeStyle = \"red\";\n        ctx.font = \"15px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"red\";\n        if (this.selectedLabel === label) {\n          // keep the canvas clear canvas if user clicked the label button a second consecutive time\n          this.selectedLabel = \"\";\n          return\n        }\n        this.selectedLabel = label;\n        // initialize lists of boxes and markers to be drawn\n        const boxMap = new Map();\n        let markers = [];\n        const es_data = this.elasticsearch_data;\n        let instance = 0;\n        let i=0;\n        es_data.forEach(function (record) {\n          if (record.Name === label) {\n            markers.push({'time': record.Timestamp/1000, 'text': record.Name, 'overlayText': record.Name});\n            // Save bounding box info if it exists\n            if (record.BoundingBox) {\n              // TODO: move image processing to a separate component\n              if (this.mediaType === \"image\") {\n                const boxinfo = {\n                  'instance': i,\n                  'name': record.Name,\n                  'confidence': (record.Confidence * 1).toFixed(2),\n                  'x': record.BoundingBox.Left * canvas.width,\n                  'y': record.BoundingBox.Top * canvas.height,\n                  'width': record.BoundingBox.Width * canvas.width,\n                  'height': record.BoundingBox.Height * canvas.height\n                };\n                boxMap.set(i++, [boxinfo])\n              } else {\n                // Use time resolution of 0.1 second\n                const timestamp = Math.round(record.Timestamp / 100);\n                if (boxMap.has(timestamp)) {\n                  const boxinfo = {\n                    'instance': instance++,\n                    'timestamp': Math.ceil(record.Timestamp / 100),\n                    'name': record.Name,\n                    'confidence': (record.Confidence * 1).toFixed(2),\n                    'x': record.BoundingBox.Left * canvas.width,\n                    'y': record.BoundingBox.Top * canvas.height,\n                    'width': record.BoundingBox.Width * canvas.width,\n                    'height': record.BoundingBox.Height * canvas.height\n                  };\n                  boxMap.get(timestamp).push(boxinfo)\n                } else {\n                  instance = 0;\n                  const boxinfo = {\n                    'instance': instance++,\n                    'timestamp': Math.ceil(record.Timestamp / 100),\n                    'name': record.Name,\n                    'confidence': (record.Confidence * 1).toFixed(2),\n                    'x': record.BoundingBox.Left * canvas.width,\n                    'y': record.BoundingBox.Top * canvas.height,\n                    'width': record.BoundingBox.Width * canvas.width,\n                    'height': record.BoundingBox.Height * canvas.height\n                  };\n                  boxMap.set(timestamp, [boxinfo])\n                }\n              }\n            }\n          }\n        }.bind(this));\n        if (boxMap.size > 0) {\n          this.drawBoxes(boxMap);\n        }\n        // TODO: move image processing to a separate component\n        if (this.mediaType === \"video\") {\n          // redraw markers on video timeline\n          this.player.markers.removeAll();\n          this.player.markers.add(markers);\n        }\n      },\n      drawBoxes: function(boxMap) {\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        // TODO: move image processing to a separate component\n        if (this.mediaType === \"image\") {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.beginPath();\n          ctx.strokeStyle = \"red\";\n          ctx.font = \"15px Arial\";\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillStyle = \"red\";\n          // For each box instance...\n          boxMap.forEach( i => {\n            let drawMe = i[0];\n            if (drawMe) {\n              ctx.rect(drawMe.x, drawMe.y, drawMe.width, drawMe.height);\n              // Draw object name and confidence score\n              ctx.fillText(drawMe.name + \" (\" + drawMe.confidence + \"%)\", (drawMe.x + drawMe.width / 2), drawMe.y - 10);\n              ctx.stroke();\n            }\n          });\n          // now return so we avoid rendering any of the video related components below\n          return\n        }\n        // If user just clicked a new label...\n        if (this.canvasRefreshInterval !== undefined) {\n          // ...then reset the old canvas refresh interval.\n          clearInterval(this.canvasRefreshInterval)\n        }\n        // Look for and draw bounding boxes every 100ms\n        const interval_ms = 100;\n        const erase_on_iteration = 2;\n        let i = 0;\n        this.canvasRefreshInterval = setInterval(function () {\n          i++;\n          // erase old bounding boxes\n          if (!this.player.paused() && i % erase_on_iteration === 0) {\n            i=0;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.beginPath();\n            ctx.strokeStyle = \"red\";\n            ctx.font = \"15px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = \"red\";\n          }\n          // Get current player timestamp to the nearest 1/10th second\n          const player_timestamp = Math.round(this.player.currentTime()*10.0);\n          // If we have a box for the player's timestamp...\n          if (boxMap.has(player_timestamp)) {\n            i=0;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.beginPath();\n            ctx.strokeStyle = \"red\";\n            ctx.font = \"15px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = \"red\";\n            // ...then get a list of box instances\n            const instance_list = (boxMap.get(player_timestamp)).map( item => item.instance).filter((v, i, a) => a.indexOf(v) === i);\n            // For each box instance...\n            instance_list.forEach( i => {\n              // ...get all of the boxes belonging to this instance\n              // at the current timestamp.\n              const boxes = boxMap.get(player_timestamp).filter(box => box.instance === i);\n              boxes.forEach (drawMe => {\n                if (drawMe) {\n                  ctx.rect(drawMe.x, drawMe.y, drawMe.width, drawMe.height);\n                  // Draw object name and confidence score\n                  ctx.fillText(drawMe.name + \" (\" + drawMe.confidence + \"%)\", (drawMe.x + drawMe.width / 2), drawMe.y - 10);\n                }\n              })\n            });\n            ctx.stroke();\n          }\n        }.bind(this), interval_ms);\n      },\n      chartData() {\n        let timeseries = new Map();\n        function saveTimestamp (millisecond) {\n          if (timeseries.has(millisecond)) {\n            timeseries.set(millisecond, {\"x\": millisecond, \"y\": timeseries.get(millisecond).y + 1})\n          } else {\n            timeseries.set(millisecond, {\"x\": millisecond, \"y\":1})\n          }\n        }\n        const es_data = this.elasticsearch_data;\n        es_data.forEach( function(record) {\n          // Define timestamp with millisecond resolution\n          const millisecond = Math.round(record.Timestamp);\n          if (this.selectedLabel) {\n            // No label has been selected, so enumerate timestamps for all label names.\n            if (record.Name === this.selectedLabel) {\n              saveTimestamp(millisecond);\n            }\n          } else {\n            // Label is undefined. Enumerate timestamps for all label names.\n            saveTimestamp(millisecond);\n          }\n        }.bind(this));\n        //sort the timeseries map by its millisecond key\n        const ordered_timeseries = new Map([...timeseries.entries()].slice().sort((a, b) => a[0] - b[0]));\n        const chartTuples = Array.from(ordered_timeseries.values());\n        this.$store.commit('updateTimeseries', chartTuples);\n        this.$store.commit('updateSelectedLabel', this.selectedLabel);\n      },\n    }\n  }\n</script>\n"],"sourceRoot":"src/components"}]}
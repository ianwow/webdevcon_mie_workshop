{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/views/Collection.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/views/Collection.vue","mtime":1637610292889},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js","mtime":1633407348173},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Collection.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA,OAAA,MAAA,MAAA,yBAAA;AACA,OAAA,cAAA,MAAA,iCAAA;AACA,OAAA,OAAA,MAAA,0BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,MAAA,EAAA,MADA;AAEA,IAAA,OAAA,EAAA,OAFA;AAGA,IAAA,cAAA,EAAA;AAHA,GAFA;AAOA,EAAA,IAPA,kBAOA;AACA,WAAA;AACA,MAAA,sBAAA,EAAA,KADA;AAEA,MAAA,kBAAA,EAAA,KAFA;AAGA,MAAA,gBAAA,EAAA,CAHA;AAIA,MAAA,QAAA,EAAA,IAJA;AAKA,MAAA,WAAA,EAAA,CALA;AAMA,MAAA,OAAA,EAAA,EANA;AAOA,MAAA,MAAA,EAAA,KAPA;AAQA,MAAA,kBAAA,EAAA,EARA;AASA,MAAA,UAAA,EAAA,EATA;AAUA,MAAA,MAAA,EAAA,SAVA;AAWA,MAAA,QAAA,EAAA,IAXA;AAYA,MAAA,MAAA,EAAA,CACA;AACA,qBAAA;AACA,UAAA,KAAA,EAAA,WADA;AAEA,UAAA,QAAA,EAAA;AAFA;AADA,OADA,EAOA;AACA,oBAAA;AACA,UAAA,KAAA,EAAA,WADA;AAEA,UAAA,QAAA,EAAA,IAFA;AAGA,UAAA,OAAA,EAAA,CAAA,eAAA;AAHA;AADA,OAPA,EAcA;AACA,kBAAA;AACA,UAAA,KAAA,EAAA,QADA;AAEA,UAAA,QAAA,EAAA,IAFA;AAGA,UAAA,OAAA,EAAA,CAAA,eAAA;AAHA;AADA,OAdA,EAqBA;AACA,oBAAA;AACA,UAAA,KAAA,EAAA,UADA;AAEA,UAAA,QAAA,EAAA,KAFA;AAGA,UAAA,OAAA,EAAA,CAAA,eAAA;AAHA;AADA,OArBA,EA4BA;AACA,mBAAA;AACA,UAAA,KAAA,EAAA,SADA;AAEA,UAAA,QAAA,EAAA,IAFA;AAGA,UAAA,OAAA,EAAA,CAAA,eAAA;AAHA;AADA,OA5BA,EAmCA;AACA,mBAAA;AACA,UAAA,KAAA,EAAA,SADA;AAEA,UAAA,QAAA,EAAA;AAFA;AADA,OAnCA;AAZA,KAAA;AAuDA,GA/DA;AAgEA,EAAA,QAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,aAAA,KAAA,UAAA,CAAA,MAAA;AACA;AAHA,GAhEA;AAqEA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,MAAA,GAAA,IAAA;AACA,SAAA,wBAAA;AACA,GAxEA;AAyEA,EAAA,OAAA,EAAA;AACA,IAAA,UAAA,EAAA,oBAAA,GAAA,EAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,GAAA,EAAA,QAAA,EAAA,oBAAA;AACA,KAHA;AAIA,IAAA,WAJA,uBAIA,OAJA,EAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,OADA,GACA,iBADA;AAEA,gBAAA,IAFA,GAEA,cAAA,OAFA;AAGA,gBAAA,WAHA,GAGA;AACA,kBAAA,QAAA,EAAA;AADA,iBAHA;AAAA;AAAA;AAAA,uBAOA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,GAAA,CAAA,OAAA,EAAA,IAAA,EAAA,WAAA,CAPA;;AAAA;AAQA,gBAAA,KAAA,CAAA,gBAAA,GAAA,CAAA;AACA,gBAAA,KAAA,CAAA,UAAA,GAAA,EAAA;;AACA,gBAAA,KAAA,CAAA,wBAAA;;AAVA;AAAA;;AAAA;AAAA;AAAA;AAYA,gBAAA,KAAA,CAAA,kBAAA,GAAA,IAAA;AACA,gBAAA,OAAA,CAAA,GAAA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA,KAnBA;AAoBA,IAAA,kBApBA,8BAoBA,KApBA,EAoBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,OADA,GACA,8BADA;AAEA,gBAAA,IAFA,GAEA,UAFA;AAGA,gBAAA,SAHA,GAGA;AACA,kBAAA,OAAA,EAAA;AAAA,oCAAA;AAAA,mBADA;AAEA,kBAAA,IAAA,EAAA;AACA,4BAAA;AACA,yCAAA;AACA,iCAAA;AAAA,mCAAA,iBAAA;AAAA,kCAAA;AAAA;AADA;AADA;AADA,mBAFA;AASA,kBAAA,qBAAA,EAAA;AAAA,yBAAA,KAAA;AAAA,+BAAA;AAAA;AATA,iBAHA;AAAA;AAAA,uBAcA,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,EAAA,IAAA,EAAA,SAAA,CAdA;;AAAA;AAcA,gBAAA,QAdA;;AAAA,oBAeA,QAfA;AAAA;AAAA;AAAA;;AAgBA,gBAAA,MAAA,CAAA,sBAAA,GAAA,IAAA;AAhBA;AAAA;;AAAA;AAmBA,gBAAA,MAAA,CAAA,QAAA,GAAA,KAAA;AAnBA;AAAA,uBAoBA,QApBA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA,KA1CA;AA2CA,IAAA,gBA3CA,8BA2CA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,MAAA,CAAA,eAAA,GAAA,KAAA;AACA,gBAAA,MAAA,CAAA,MAAA,GAAA,IAAA;AACA,gBAAA,KAHA,GAGA,MAAA,CAAA,kBAHA,EAIA;;AAJA,sBAKA,KAAA,KAAA,EALA;AAAA;AAAA;AAAA;;AAMA,gBAAA,MAAA,CAAA,sBAAA,GAAA,KAAA;AACA,gBAAA,MAAA,CAAA,UAAA,GAAA,EAAA;;AACA,gBAAA,MAAA,CAAA,wBAAA;;AACA,gBAAA,MAAA,CAAA,MAAA,GAAA,KAAA;AATA;AAAA;;AAAA;AAAA;AAAA,uBAaA,MAAA,CAAA,kBAAA,CAAA,KAAA,CAbA;;AAAA;AAaA,gBAAA,WAbA;;AAAA,sBAcA,WAAA,CAAA,IAAA,CAAA,KAAA,KAAA,CAdA;AAAA;AAAA;AAAA;;AAeA;AACA,gBAAA,MAAA,CAAA,UAAA,GAAA,EAAA;AACA,gBAAA,MAAA,CAAA,eAAA,GAAA,IAAA;AACA,gBAAA,MAAA,CAAA,MAAA,GAAA,KAAA;AAlBA;AAAA;;AAAA;AAqBA,gBAAA,MArBA,GAqBA,EArBA;AAsBA,gBAAA,MAAA,CAAA,UAAA,GAAA,EAAA;AACA,gBAAA,MAAA,CAAA,eAAA,GAAA,KAAA;AACA,gBAAA,OAxBA,GAwBA,WAAA,CAAA,YAAA,CAAA,eAAA,CAAA,OAxBA;AAyBA,gBAAA,CAzBA,GAyBA,CAzBA,EAyBA,GAzBA,GAyBA,OAAA,CAAA,MAzBA;;AAAA;AAAA,sBAyBA,CAAA,GAAA,GAzBA;AAAA;AAAA;AAAA;;AA0BA,gBAAA,OA1BA,GA0BA,OAAA,CAAA,CAAA,CAAA,CAAA,GA1BA;AAAA;AAAA,uBA2BA,MAAA,CAAA,mBAAA,CAAA,OAAA,CA3BA;;AAAA;AA2BA,gBAAA,SA3BA;;AA4BA,oBAAA,SAAA,KAAA,IAAA,EAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,SAAA;AACA;;AA9BA;AAyBA,gBAAA,CAAA,EAzBA;AAAA;AAAA;;AAAA;AAgCA,oBAAA,MAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,eAAA,GAAA,IAAA;AACA,kBAAA,MAAA,CAAA,MAAA,GAAA,KAAA;AACA,iBAHA,MAIA;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,MAAA;;AACA,kBAAA,MAAA,CAAA,MAAA,GAAA,KAAA;AACA;;AAvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CA,KArFA;AAsFA,IAAA,sBAtFA,kCAsFA,OAtFA,EAsFA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,OADA,GACA,gBADA;AAEA,gBAAA,IAFA,GAEA,8BAAA,OAFA;AAGA,gBAAA,WAHA,GAGA;AACA,kBAAA,QAAA,EAAA;AADA,iBAHA;AAAA;AAAA;AAAA,uBAOA,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,GAAA,CAAA,OAAA,EAAA,IAAA,EAAA,WAAA,CAPA;;AAAA;AAOA,gBAAA,QAPA;AAAA,kDAQA,QAAA,CAAA,IARA;;AAAA;AAAA;AAAA;AAUA,gBAAA,OAAA,CAAA,GAAA;;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA,KAlGA;AAmGA,IAAA,iBAnGA,6BAmGA,MAnGA,EAmGA,KAnGA,EAmGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,IADA,GACA;AAAA,8BAAA,MAAA;AAAA,2BAAA;AAAA,iBADA;AAEA,gBAAA,OAFA,GAEA,iBAFA;AAGA,gBAAA,IAHA,GAGA,UAHA;AAIA,gBAAA,WAJA,GAIA;AACA,kBAAA,IAAA,EAAA,IADA;AAEA,kBAAA,QAAA,EAAA,IAFA;AAGA,kBAAA,YAAA,EAAA;AAHA,iBAJA;AAAA;AAAA;AAAA,uBAUA,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,EAAA,IAAA,EAAA,WAAA,CAVA;;AAAA;AAUA,gBAAA,QAVA;AAAA,kDAWA,QAAA,CAAA,IAXA;;AAAA;AAAA;AAAA;AAaA,gBAAA,MAAA,CAAA,kBAAA,GAAA,IAAA;AACA,gBAAA,OAAA,CAAA,GAAA;;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,KAnHA;AAoHA,IAAA,mBApHA,+BAoHA,OApHA,EAoHA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,OADA,GACA,iBADA;AAEA,gBAAA,IAFA,GAEA,cAAA,OAFA;AAGA,gBAAA,WAHA,GAGA;AACA,kBAAA,QAAA,EAAA;AADA,iBAHA;AAAA;AAAA;AAAA,uBAOA,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,GAAA,CAAA,OAAA,EAAA,IAAA,EAAA,WAAA,CAPA;;AAAA;AAOA,gBAAA,QAPA;AAAA,kDAQA,QAAA,CAAA,IARA;;AAAA;AAAA;AAAA;AAUA,gBAAA,MAAA,CAAA,kBAAA,GAAA,IAAA;AACA,gBAAA,OAAA,CAAA,GAAA;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,KAjIA;AAkIA,IAAA,WAlIA,yBAkIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,OADA,GACA,iBADA;AAEA,gBAAA,IAFA,GAEA,UAFA;AAGA,gBAAA,WAHA,GAGA;AACA,kBAAA,QAAA,EAAA;AADA,iBAHA;AAAA;AAAA;AAAA,uBAOA,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,GAAA,CAAA,OAAA,EAAA,IAAA,EAAA,WAAA,CAPA;;AAAA;AAOA,gBAAA,QAPA;AAAA,kDAQA,QAAA,CAAA,IARA;;AAAA;AAAA;AAAA;AAUA,gBAAA,MAAA,CAAA,kBAAA,GAAA,IAAA;AACA,gBAAA,OAAA,CAAA,GAAA;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,KA/IA;AAgJA,IAAA,iBAhJA,6BAgJA,MAhJA,EAgJA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAA,CAAA,GAAA,CAAA,EAAA,GAAA,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA,GAAA,GAAA,EAAA,CAAA,EAAA,EAAA;AAEA,sBAAA,QAAA,MAAA,CAAA,CAAA,CAAA,MAAA,QAAA,EAAA;AACA;AACA,oBAAA,OAAA,GAAA,MAAA,CAAA,CAAA,CAAA,CAAA,QAAA;AACA,mBAHA,MAGA;AACA;AACA,oBAAA,OAAA,GAAA,MAAA,CAAA,CAAA,CAAA;AACA,mBARA,CASA;AACA;;;AACA,kBAAA,MAAA,CAAA,gBAAA,CAAA,OAAA;AACA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA,KA9JA;AA+JA,IAAA,gBA/JA,4BA+JA,OA/JA,EA+JA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,MAAA,CAAA,mBAAA,CAAA,OAAA,CADA;;AAAA;AACA,gBAAA,SADA;AAEA,gBAAA,OAFA,GAEA,IAAA,IAAA,CAAA,CAAA,CAFA;AAGA,gBAAA,OAAA,CAAA,aAAA,CAAA,SAAA,CAAA,OAAA,CAAA,OAAA;AACA,gBAAA,eAJA,GAIA,qBAAA,OAJA;AAKA,gBAAA,aALA,GAKA,SAAA,CAAA,OAAA,CAAA,QALA;AAMA,gBAAA,UANA,GAMA,SAAA,CAAA,OAAA,CAAA,KANA;AAOA,gBAAA,KAPA,GAOA,UAAA,MAAA,CAAA,gBAAA,GAAA,GAAA,GAAA,eAPA;AAQA,gBAAA,QARA,GAQA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EARA,EASA;AACA;;AACA,gBAAA,cAXA,GAWA,oBAAA,OAAA,GAAA,GAAA,GAAA,QAAA,CAAA,SAAA,CAAA,CAAA,EAAA,QAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,wBAXA;AAYA,gBAAA,iBAZA,GAYA,MAAA,CAAA,gBAZA,EAaA;AACA;;AACA,gBAAA,qBAfA,GAeA,CAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,QAAA,CAfA;AAgBA,gBAAA,UAhBA,GAgBA,QAAA,CAAA,SAAA,CAAA,QAAA,CAAA,WAAA,CAAA,GAAA,CAAA,EAAA,WAAA,EAhBA;;AAiBA,oBAAA,qBAAA,CAAA,QAAA,CAAA,UAAA,CAAA,EAAA;AACA;AACA,kBAAA,cAAA,GAAA,UAAA;AACA,kBAAA,iBAAA,GAAA,aAAA;AACA;;AArBA;AAAA,uBAsBA,OAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,iBAAA,EAAA,cAAA,CAAA,EAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,CAAA,CAtBA;;AAAA;AAAA;AAAA;AAsBA,gBAAA,SAtBA;AAsBA,gBAAA,cAtBA;;AAuBA,oBAAA,cAAA,CAAA,CAAA,CAAA,IAAA,SAAA,EACA;AACA,kBAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,oBAAA,QAAA,EAAA,OADA;AAEA,oBAAA,OAAA,EAAA,OAFA;AAGA,oBAAA,QAAA,EAAA,QAHA;AAIA,oBAAA,MAAA,EAAA,cAAA,CAAA,CAAA,CAAA,CAAA,MAJA;AAKA,oBAAA,0BAAA,EAAA,aAAA,MAAA,CAAA,UAAA,GAAA,6CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,uBAAA,GAAA,cAAA,CAAA,CAAA,CAAA,CAAA,wBALA;AAMA,oBAAA,MAAA,EAAA,KANA;AAOA,oBAAA,SAAA,EAAA,SAPA;AAQA,oBAAA,WAAA,EAAA,MAAA,OARA;AASA,oBAAA,SAAA,EAAA,EATA;AAUA,oBAAA,OAAA,EAAA;AAVA,mBAAA;AAYA;;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCA,KArMA;AAuMA,IAAA,wBAvMA,sCAuMA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,OAAA,CAAA,WAAA,EADA;;AAAA;AACA,gBAAA,IADA;AAEA,gBAAA,MAFA,GAEA,IAAA,CAAA,MAFA;;AAGA,oBAAA,MAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,OAAA,CAAA,QAAA,GAAA,IAAA;AACA,kBAAA,OAAA,CAAA,eAAA,GAAA,KAAA;AACA,kBAAA,OAAA,CAAA,MAAA,GAAA,KAAA;AACA,iBAJA,MAKA;AACA,kBAAA,OAAA,CAAA,QAAA,GAAA,KAAA;;AACA,kBAAA,OAAA,CAAA,iBAAA,CAAA,MAAA;;AACA,kBAAA,OAAA,CAAA,MAAA,GAAA,KAAA;AACA;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AApNA;AAzEA,CAAA","sourcesContent":["<template>\n  <div>\n    <div class=\"headerTextBackground\">\n      <Header :is-collection-active=\"true\" />\n      <b-container fluid>\n        <b-alert\n          v-model=\"showElasticSearchAlert\"\n          variant=\"danger\"\n          dismissible\n        >\n          Elasticsearch error. Please check browser and elasticsearch access logs.\n        </b-alert>\n        <b-alert\n          v-model=\"showDataplaneAlert\"\n          variant=\"danger\"\n          dismissible\n        >\n          Dataplane Error. Please check browser and dataplane logs.\n        </b-alert>\n        <b-alert\n          v-model=\"showDeletedAlert\"\n          variant=\"success\"\n          dismissible\n          fade\n        >\n          Successfully Deleted Asset\n        </b-alert>\n        <b-row align-h=\"center\">\n          <h1>Media Collection</h1>\n        </b-row>\n        <b-row\n          align-h=\"center\"\n          class=\"tagline\"\n        >\n          <b>Discover insights in your media by searching for keywords, objects, or even people.</b>\n        </b-row>\n        <b-row\n          class=\"my-1\"\n          align-v=\"center\"\n          align-h=\"center\"\n        >\n          <b-col sm=\"5\">\n            <input\n              v-model=\"user_defined_query\"\n              type=\"text\"\n              placeholder=\"Search Collection...\"\n              @keyup.enter=\"searchCollection\"\n            >\n          </b-col>\n          <b-col sm=\"1\">\n            <b-button\n              size=\"lg\"\n              @click=\"searchCollection\"\n            >\n              Search\n            </b-button>\n          </b-col>\n        </b-row>\n      </b-container>\n    </div>\n    <b-container\n      fluid\n      class=\"resultsTable\"\n    >\n      <b-row>\n        <b-col>\n          <div>\n            <div class=\"column\">\n              <b-row class=\"my-1\">\n                <b-col>\n                  <b-table\n                    striped\n                    hover\n                    fixed\n                    responsive\n                    show-empty\n                    :fields=\"fields\"\n                    :items=\"asset_list\"\n                    :sort-by.sync=\"sortBy\"\n                    :sort-desc.sync=\"sortDesc\"\n                    :current-page=\"currentPage\"\n                    :per-page=\"perPage\"\n                  >\n                    <template #cell(Thumbnail)=\"data\">\n                      <VideoThumbnail\n                        :thumbnail-i-d=\"data.item.thumbnailID\"\n                        :signed-url=\"data.item.signedUrl\"\n                      />\n                    </template>\n                    <template #cell(Created)=\"data\">\n                      {{ data.item.Created.toLocaleDateString() }}<br>\n                      {{ data.item.Created.toLocaleTimeString() }}\n                    </template>\n                    <template #cell(status)=\"data\">\n                      <!-- open link in new tab -->\n                      <a v-if=\"data.item.status !== 'Queued'\" href=\"\" @click.stop.prevent=\"openWindow(data.item.state_machine_console_link)\">{{ data.item.status }}</a>\n                      <div v-if=\"data.item.status === 'Queued'\">\n                        {{ data.item.status }}\n                      </div>\n                    </template>\n                    <template #cell(Actions)=\"data\">\n                      <b-link\n                        :href=\"(`/analysis/${data.item.asset_id}`)\"\n                      >\n                        Analyze\n                      </b-link>\n                      <br>\n                      <b-link\n                        class=\"text-danger\"\n                        @click=\"deleteAsset(`${data.item.asset_id}`)\"\n                      >\n                        Delete\n                      </b-link>\n                    </template>\n                  </b-table>\n                  <div\n                    v-if=\"noAssets\"\n                  >\n                    <p>\n                      Looks like no assets have been uploaded! Try uploading <a href=\"upload\" rel=\"noopener noreferrer\">here</a>.\n                    </p>\n                  </div>\n                  <div\n                    v-if=\"isBusy\"\n                    class=\"wrapper\"\n                  >\n                    <Loading v-if=\"isBusy\" />\n                    <p class=\"text-muted\">\n                      (Loading...)\n                    </p>\n                  </div>\n                </b-col>\n              </b-row>\n              <b-row align-h=\"center\">\n                <b-pagination\n                  v-model=\"currentPage\"\n                  :total-rows=\"totalRows\"\n                  :per-page=\"perPage\"\n                  class=\"my-0\"\n                />\n              </b-row>\n            </div>\n          </div>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\n  import Header from '@/components/Header.vue'\n  import VideoThumbnail from '@/components/VideoThumbnail.vue'\n  import Loading from '@/components/Loading.vue'\n\n  export default {\n    name: \"Run\",\n    components: {\n      Header,\n      Loading,\n      VideoThumbnail\n    },\n    data() {\n      return {\n        showElasticSearchAlert: false,\n        showDataplaneAlert: false,\n        showDeletedAlert: 0,\n        noAssets: null,\n        currentPage: 1,\n        perPage: 10,\n        isBusy: false,\n        user_defined_query: \"\",\n        asset_list: [],\n        sortBy: 'Created',\n        sortDesc: true,\n        fields: [\n            {\n              'Thumbnail': {\n              label: \"Thumbnail\",\n              sortable: false\n              }\n            },\n            {\n              'Filename': {\n              label: \"File Name\",\n              sortable: true,\n              tdClass: [\"tableWordWrap\"]\n              }\n            },\n            {\n              'status': {\n              label: \"Status\",\n              sortable: true,\n              tdClass: [\"tableWordWrap\"]\n              }\n            },\n            {\n            'asset_id': {\n              label: 'Asset ID',\n              sortable: false,\n              tdClass: [\"tableWordWrap\"]\n              }\n            },\n            {\n              'Created': {\n              label: \"Created\",\n              sortable: true,\n              tdClass: [\"tableWordWrap\"]\n              }\n            },\n            {\n              'Actions': {\n              label: 'Actions',\n              sortable: false\n              }\n            }\n        ]\n      }\n    },\n    computed: {\n      totalRows() {\n        return this.asset_list.length\n      }\n    },\n    created: function () {\n      this.isBusy = true;\n      this.retrieveAndFormatAsssets()\n    },\n    methods: {\n      openWindow: function (url) {\n        window.open(url, \"_blank\", \"noopener,noreferer\");\n      },\n      async deleteAsset(assetId) {\n        let apiName = 'mieDataplaneApi'\n        let path = 'metadata/' + assetId\n        let requestOpts = {\n          response: true,\n        };\n        try {\n          await this.$Amplify.API.del(apiName, path, requestOpts);\n          this.showDeletedAlert = 5;\n          this.asset_list = [];\n          this.retrieveAndFormatAsssets()\n        } catch (error) {\n          this.showDataplaneAlert = true\n          console.log(error)\n        }\n      },\n      async elasticsearchQuery (query) {\n            let apiName = 'contentAnalysisElasticsearch';\n            let path = '/_search';\n            let apiParams = {\n              headers: {'Content-Type': 'application/json'},\n              body: {\n              \"aggs\" : {\n                \"distinct_assets\" : {\n                  \"terms\" : { \"field\" : \"AssetId.keyword\", \"size\" : 10000 }\n                }\n                }\n              },\n              queryStringParameters: {'q': query, '_source': 'AssetId'}\n            };\n            let response = await this.$Amplify.API.post(apiName, path, apiParams);\n            if (!response) {\n              this.showElasticSearchAlert = true\n            }\n            else {\n              this.noAssets = false;\n              return await response;\n        }\n      },\n      async searchCollection () {\n          this.noSearchResults = false;\n          this.isBusy = true;\n          let query = this.user_defined_query;\n          // if search is empty string then get asset list from dataplane instead of Elasticsearch.\n          if (query === \"\") {\n            this.showElasticSearchAlert = false;\n            this.asset_list = [];\n            this.retrieveAndFormatAsssets();\n            this.isBusy = false;\n          }\n          else {\n            // Get the list of assets that contain metadata matching the user-specified search query.\n            let elasticData = await this.elasticsearchQuery(query);\n            if (elasticData.hits.total === 0) {\n              // the search returned no data\n              this.asset_list = [];\n              this.noSearchResults = true;\n              this.isBusy = false;\n            }\n            else {\n              let assets = [];\n              this.asset_list = [];\n              this.noSearchResults = false;\n              let buckets = elasticData.aggregations.distinct_assets.buckets;\n              for (var i = 0, len = buckets.length; i < len; i++) {\n                let assetId = buckets[i].key;\n                let assetInfo = await this.getAssetInformation(assetId);\n                if (assetInfo !== null) {\n                  assets.push(assetInfo)\n                }\n            }\n            if (assets.length === 0) {\n              this.noSearchResults = true;\n              this.isBusy = false\n            }\n            else {\n              this.pushAssetsToTable(assets);\n              this.isBusy = false\n            }\n          }\n        }\n      },\n      async getAssetWorkflowStatus (assetId) {\n        let apiName = 'mieWorkflowApi'\n        let path = 'workflow/execution/asset/' + assetId\n        let requestOpts = {\n          response: true,\n        };\n        try {\n          let response = await this.$Amplify.API.get(apiName, path, requestOpts);\n          return response.data\n        } catch (error) {\n          console.log(error)\n        }\n      },\n      async getAssetThumbnail (bucket, s3Key) {\n        const data = { \"S3Bucket\": bucket, \"S3Key\": s3Key };\n        let apiName = 'mieDataplaneApi'\n        let path = 'download'\n        let requestOpts = {\n          body: data,\n          response: true,\n          responseType: 'text'\n        };\n        try {\n          let response = await this.$Amplify.API.post(apiName, path, requestOpts);\n          return response.data\n        } catch (error) {\n          this.showDataplaneAlert = true\n          console.log(error)\n        }\n      },\n      async getAssetInformation (assetId) {\n        let apiName = 'mieDataplaneApi'\n        let path = 'metadata/' + assetId\n        let requestOpts = {\n          response: true,\n        };\n        try {\n          let response = await this.$Amplify.API.get(apiName, path, requestOpts);\n          return response.data\n        } catch (error) {\n          this.showDataplaneAlert = true\n          console.log(error)\n        }\n      },\n      async fetchAssets () {\n        let apiName = 'mieDataplaneApi'\n        let path = 'metadata'\n        let requestOpts = {\n          response: true,\n        };\n        try {\n          let response = await this.$Amplify.API.get(apiName, path, requestOpts);\n          return response.data\n        } catch (error) {\n          this.showDataplaneAlert = true\n          console.log(error)\n        }\n      },\n      async pushAssetsToTable(assets) {\n        for (var i = 0, len = assets.length; i < len; i++) {\n          var assetId;\n          if (typeof assets[i] === 'object') {\n            // If the asset list is coming from Elasticsearch, we get the assetId like this:\n            assetId = assets[i].asset_id\n          } else {\n            // If the asset list is coming from the dataplaneapi, we get the assetId like this:\n            assetId = assets[i]\n          }\n          // Invoke an asynchronous task to add assets to the table in parallel so the table updates\n          // as fast as possible. For large media collections this may take several seconds.\n          this.pushAssetToTable(assetId)\n        }\n      },\n      async pushAssetToTable (assetId) {\n        const assetInfo = await this.getAssetInformation(assetId);\n        let created = new Date(0);\n        created.setUTCSeconds(assetInfo.results.Created);\n        const metadata_folder = \"/private/assets/\"+assetId\n        const source_bucket = assetInfo.results.S3Bucket;\n        const source_key = assetInfo.results.S3Key;\n        let s3Uri = 's3://' + this.DATAPLANE_BUCKET + '/' + metadata_folder;\n        const filename = source_key.split(\"/\").pop();\n        // The thumbnail is created by Media Convert, see:\n        // source/operators/thumbnail/start_thumbnail.py\n        let thumbnailS3Key = 'private/assets/' + assetId + '/' + filename.substring(0, filename.lastIndexOf(\".\")) + '_thumbnail.0000001.jpg';\n        let thumbnailS3Bucket = this.DATAPLANE_BUCKET\n        // If it's an image then Media Convert won't create a thumbnail.\n        // In that case we use the uploaded image as the thumbnail.\n        const supported_image_types = [\".jpg\", \".jpeg\", \".tif\", \".tiff\", \".png\", \".apng\", \".gif\", \".bmp\", \".s gvg\"];\n        const media_type = filename.substring(filename.lastIndexOf(\".\")).toLowerCase();\n        if (supported_image_types.includes(media_type)) {\n          // use the uploaded image as a thumbnail\n          thumbnailS3Key = source_key;\n          thumbnailS3Bucket = source_bucket;\n        }\n        let [thumbnail, workflowStatus] = await Promise.all([this.getAssetThumbnail(thumbnailS3Bucket, thumbnailS3Key), this.getAssetWorkflowStatus(assetId)]);\n        if (workflowStatus[0] && thumbnail)\n        {\n          this.asset_list.push({\n            asset_id: assetId,\n            Created: created,\n            Filename: filename,\n            status: workflowStatus[0].Status,\n            state_machine_console_link: \"https://\" + this.AWS_REGION + \".console.aws.amazon.com/states/home?region=\" + this.AWS_REGION + \"#/executions/details/\" + workflowStatus[0].StateMachineExecutionArn,\n            s3_uri: s3Uri,\n            signedUrl: thumbnail,\n            thumbnailID: '_' + assetId,\n            Thumbnail: '',\n            Actions: 'Run'\n          })\n        }\n      },\n\n      async retrieveAndFormatAsssets () {\n        let data = await this.fetchAssets();\n        let assets = data.assets;\n        if (assets.length === 0) {\n          this.noAssets = true;\n          this.noSearchResults = false;\n          this.isBusy = false;\n        }\n        else {\n          this.noAssets = false;\n          this.pushAssetsToTable(assets);\n          this.isBusy = false\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  td {\n    vertical-align: middle;\n  }\n  .headerTextBackground {\n    background-color: #191918;\n    max-width: 100%;\n    height: auto;\n    padding-bottom: 1%;\n  }\n  .resultsTable {\n    padding-top: 1%;\n  }\n  h1 {\n    color: #ED900E;\n  }\n  a {\n    color: #ED900E;\n  }\n  .tagline {\n    color: white\n  }\n  .btn-orange {\n    color: #ED900E\n  }\n  .btn-red {\n    color: red\n  }\n  .tableWordWrap {\n    white-space:normal;\n    word-break:break-all;\n    overflow: hidden;\n    text-overflow:ellipsis;\n  }\n</style>\n"],"sourceRoot":"src/views"}]}
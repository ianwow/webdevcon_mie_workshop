{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/thread-loader/dist/cjs.js!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/components/LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/components/LineChart.vue","mtime":1623875433274},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/thread-loader/dist/cjs.js","mtime":1633407346686},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js","mtime":1633407348173},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <b-container>\n    <div v-if=\"isBusy\">\n      <Loading />\n    </div>\n    <div v-else>\n      <div id=\"container\">\n        <canvas id=\"lineChart\" @click=\"handleClick\"></canvas>\n        <canvas id=\"verticalLineCanvas\" class=\"canvas\"></canvas>\n      </div>\n    </div>\n  </b-container>\n</template>\n\n<script>\n  import { mapState } from 'vuex'\n  import Chart from 'chart.js';\n  import Loading from '@/components/Loading.vue'\n\n  export default {\n    name: \"LineChart\",\n    components: {\n      Loading\n    },\n    data() {\n      return {\n        duration: undefined,\n        chartConfig: {},\n        chart: undefined,\n        isBusy: false\n      }\n    },\n    computed: {\n      ...mapState(['chart_tuples', 'selected_label', 'player']),\n    },\n    watch: {\n      chart_tuples: function() {\n        this.renderLineChart();\n      },\n      player: function() {\n        this.getDuration();\n        this.getTimeUpdate();\n        this.renderLineChart();\n      },\n    },\n    deactivated: function () {\n      console.log('deactivated component:', this.operator);\n      this.chart = Object\n    },\n    activated: function () {\n      console.log('activated component:', this.operator)\n    },\n    beforeDestroy: function () {\n      this.chart = Object\n    },\n    mounted: function () {\n      this.chartConfig = {\n        type: 'scatter',\n        data: {\n          labels: [0],\n          datasets: [{\n            data: [0],\n            borderColor: \"#3e95cd\",\n            borderWidth: 3,\n            fill: false,\n            showLine: false\n          }]\n        },\n        options: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: true,\n            text: ''\n          },\n          tooltips: {\n            enabled: false\n          },\n          responsive: true,\n          maintainAspectRatio: false,\n          aspectRatio: 1.5,\n          scales: {\n            yAxes: [{\n              display: true,\n              fixedStepSize: 1,\n              scaleLabel: {\n                display: true,\n                labelString: 'Label Quantity'\n              },\n              ticks: {\n                beginAtZero: true,\n                min: 0,\n                padding: 25,\n                callback: function(value) {\n                  if (Math.floor(value) === value) {\n                    return value;\n                  }\n                }\n              }\n            }],\n            xAxes: [{\n              display: true,\n              scaleLabel: {\n                display: true,\n                labelString: 'Time (mm:ss)'\n              },\n              ticks: {\n                beginAtZero: true,\n                minRotation: 30,\n                min: 0,\n                callback: function(milliseconds) {\n                  if (milliseconds >= 3600000) {\n                    return new Date(milliseconds).toISOString().substr(11, 12);\n                  } else {\n                    // drop hours portion if time is less than 1 hour\n                    return new Date(milliseconds).toISOString().substr(14, 9);\n                  }\n                }\n              }\n            }]\n          },\n        }\n      };\n      window.addEventListener('resize', function () {\n        // TODO: set chart and canvas width equal to video player width\n        // TODO: make columns resize equally when resizing window\n        // Update canvas size when window is resized\n        var chart = document.getElementById('lineChart');\n        var canvas_overlay = document.getElementById('verticalLineCanvas');\n        canvas_overlay.width=chart.width;\n        canvas_overlay.height=chart.height;\n\n      });\n    },\n    methods: {\n      handleClick(event) {\n        var canvas_overlay = document.getElementById('verticalLineCanvas');\n        if (canvas_overlay){\n          const chart_width = this.chart.chart.chartArea.right - this.chart.chart.chartArea.left;\n          const chart_left = this.chart.chart.chartArea.left;\n          // Ignore clicks that are on the chart but to the left of the y-axis\n          if (event.offsetX < chart_left) {\n            return\n          }\n          if (this.duration > 0) {\n            // Calculate click position as a percentage of chart width, to 1/10th precision.\n            const percentage = Math.round((event.offsetX - chart_left) / chart_width * 1000) / 10;\n            this.player.currentTime(this.duration * percentage / 100)\n          }\n        }\n      },\n      getDuration() {\n        // Get the duration for the video player source\n        if (this.player) {\n          this.player.on('loadedmetadata', function () {\n            this.duration = this.player.duration();\n          }.bind(this));\n        }\n      },\n      getTimeUpdate() {\n        // Send current time position for the video player to verticalLineCanvas\n        var last_position = 0;\n        if (this.player) {\n          this.player.on('timeupdate', function () {\n            const current_position = Math.round(this.player.currentTime() / this.player.duration() * 1000);\n            if (current_position !== last_position) {\n              this.drawVerticleLine(current_position/1000);\n              last_position = current_position;\n            }\n          }.bind(this));\n        }\n      },\n      renderLineChart() {\n        const lengthOfVideo = this.duration;\n        const data = this.chart_tuples;\n        const ctx = document.getElementById('lineChart');\n        this.chartConfig.options.title.text = this.selected_label ? this.selected_label + \" (instances / sec)\" : \"Total Labels (instances / sec)\";\n        if (this.chart === undefined) {\n          this.chart = new Chart(ctx, {\n            type: this.chartConfig.type,\n            data: {\n              datasets: [{\n                data: data\n              }]\n            },\n            options: this.chartConfig.options,\n          });\n        } else {\n          this.chart.options.title.text = this.selected_label ? this.selected_label + \" (instances / sec)\" : \"Total Labels (instances / sec)\";\n          if (lengthOfVideo) {\n            this.chart.options.scales.xAxes[0].ticks.max = lengthOfVideo*1000;\n          }\n          if (lengthOfVideo > 3600) {\n            this.chart.options.scales.xAxes[0].scaleLabel.labelString = \"Time (hh:mm:ss)\";\n          }\n\n          this.chart.data.datasets[0].data = null;\n          this.chart.data.datasets[0].data = data;\n          this.chart.lineAtIndex = .25;\n          this.chart.update();\n        }\n        // Place canvas over line chart\n        var canvas_overlay = document.getElementById('verticalLineCanvas');\n        canvas_overlay.width=this.chart.width;\n        canvas_overlay.height=this.chart.height;\n      },\n      drawVerticleLine(position) {\n        var canvas_overlay = document.getElementById('verticalLineCanvas');\n        if (!canvas_overlay) return;\n        var ctx = canvas_overlay.getContext('2d');\n        if (!ctx || !this.chart) return;\n        var scale = this.chart.scales['y-axis-1'];\n        var lineLeftOffset = (this.chart.chart.chartArea.right - this.chart.chart.chartArea.left) * position + this.chart.chart.chartArea.left;\n        ctx.clearRect(0, 0, canvas_overlay.width, canvas_overlay.height);\n        ctx.beginPath();\n        ctx.strokeStyle = '#ff0000';\n        ctx.moveTo(lineLeftOffset, scale.top);\n        ctx.lineTo(lineLeftOffset, scale.bottom+10);\n        ctx.stroke();\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  #container { position: relative; }\n  .canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    pointer-events: none;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}
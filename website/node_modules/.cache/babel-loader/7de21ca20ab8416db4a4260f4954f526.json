{"remainingRequest":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ianwow/development/aws-content-analysis/source/website/src/components/ContentModeration.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ianwow/development/aws-content-analysis/source/website/src/components/ContentModeration.vue","mtime":1637348724760},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/babel-loader/lib/index.js","mtime":1633407348173},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/cache-loader/dist/cjs.js","mtime":1633407346687},{"path":"/Users/ianwow/development/aws-content-analysis/source/website/node_modules/vue-loader/lib/index.js","mtime":1633407348650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ContentModeration.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <b-container fluid>\n    <b-col>\n      <b-row\n        align-h=\"center\"\n        class=\"my-1\"\n      >\n        <div class=\"wrapper\">\n          Confidence Threshold<br>\n          <input\n            type=\"range\"\n            value=\"90\"\n            min=\"55\"\n            max=\"99\"\n            step=\"1\"\n            @click=\"updateConfidence\"\n          >\n          {{ Confidence }}%<br>\n        </div>\n      </b-row>\n      <div v-if=\"lowerConfidence === true\">\n        {{ lowerConfidenceMessage }}\n      </div>\n      <div\n        v-if=\"isBusy\"\n        class=\"wrapper\"\n      >\n        <Loading />\n      </div>\n      <b-row\n        align-h=\"center\"\n        class=\"my-1\"\n      >\n        <div class=\"wrapper\">\n          <br>\n          <template v-for=\"label in sorted_unique_labels\">\n            <!-- Show lighter button outline since content moderation never provides bounding boxes -->\n            <b-button\n              v-b-tooltip.hover\n              variant=\"outline-secondary\"\n              :title=\"label[1]\"\n              size=\"sm\"\n              pill\n              @click=\"updateMarkers(label[0])\"\n            >\n              {{ label[0] }}\n            </b-button> &nbsp;\n          </template>\n        </div>\n      </b-row>\n\n      <b-row\n        align-h=\"center\"\n        class=\"my-1\"\n      >\n        <div\n          v-if=\"isBusy === false\"\n          class=\"wrapper\"\n        >\n          <br><p class=\"text-muted\">\n            ({{ count_labels }} identified objects, {{ count_distinct_labels }} unique)\n          </p>\n        </div>\n      </b-row>\n    </b-col>\n    <b-button\n      type=\"button\"\n      @click=\"saveFile()\"\n    >\n      Download Data\n    </b-button>\n    <br>\n    <b-button\n        :pressed=\"false\"\n        size=\"sm\"\n        variant=\"link\"\n        class=\"text-decoration-none\"\n        @click=\"showElasticsearchApiRequest = true\"\n    >\n      Show API request to get these results\n    </b-button>\n    <b-modal\n        v-model=\"showElasticsearchApiRequest\"\n        scrollable\n        title=\"SEARCH API\"\n        ok-only\n    >\n      <label>Request URL:</label>\n      <pre v-highlightjs><code class=\"bash\">GET {{ SEARCH_ENDPOINT }}workflow/execution</code></pre>\n      <label>Search query:</label>\n      <pre v-highlightjs=\"JSON.stringify(searchQuery)\"><code class=\"json\"></code></pre>\n      <label>Sample command:</label>\n      <pre v-highlightjs=\"curlCommand\"><code class=\"bash\"></code></pre>\n    </b-modal>\n  </b-container>\n</template>\n\n<script>\n  import { mapState } from 'vuex'\n  import Loading from '@/components/Loading.vue'\n\n  export default {\n    name: \"ContentModeration\",\n    components: {\n      Loading\n    },\n    props: {\n      mediaType: {\n        type: String,\n        default: \"\"\n      },\n    },\n    data() {\n      return {\n        curlCommand: '',\n        searchQuery: '',\n        showElasticsearchApiRequest: false,\n        Confidence: 90,\n        high_confidence_data: [],\n        elasticsearch_data: [],\n        count_distinct_labels: 0,\n        count_labels: 0,\n        isBusy: false,\n        operator: 'content_moderation',\n        timeseries: new Map(),\n        selectedLabel: '',\n        lowerConfidence: false,\n        lowerConfidenceMessage: 'Try lowering confidence threshold'\n      }\n    },\n    computed: {\n      ...mapState(['player']),\n      sorted_unique_labels() {\n        // This function sorts and counts unique labels for mouse over events on label buttons\n        const es_data = this.elasticsearch_data;\n        const unique_labels = new Map();\n        // sort and count unique labels for label mouse over events\n        es_data.forEach(function (record) {\n          unique_labels.set(record.Name, unique_labels.get(record.Name) ? unique_labels.get(record.Name) + 1 : 1)\n        });\n        const sorted_unique_labels = new Map([...unique_labels.entries()].slice().sort((a, b) => b[1] - a[1]));\n        // If Elasticsearch returned undefined labels then delete them:\n        sorted_unique_labels.delete(undefined);\n        this.countLabels(sorted_unique_labels.size, es_data.length);\n        return sorted_unique_labels\n      }\n    },\n    watch: {\n      // These watches update the line chart\n      selectedLabel: function() {\n        this.chartData();\n      },\n      elasticsearch_data: function() {\n        this.chartData();\n      },\n    },\n    deactivated: function () {\n      console.log('deactivated component:', this.operator);\n      this.selectedLabel = '';\n    },\n    activated: function () {\n      console.log('activated component:', this.operator);\n      this.fetchAssetData();\n    },\n    mounted: function() {\n      this.getCurlCommand();\n    },\n    beforeDestroy: function () {\n      this.high_confidence_data = [];\n      this.elasticsearch_data = [];\n      this.count_distinct_labels = 0;\n      this.count_labels = 0;\n    },\n    methods: {\n      getCurlCommand() {\n        this.searchQuery = 'AssetId:'+this.$route.params.asset_id+' Confidence:>'+this.Confidence+' Operator:'+this.operator;\n        // get curl command to search elasticsearch\n        this.curlCommand = 'awscurl -X GET --profile default --service es --region ' + this.AWS_REGION + ' \\'' + this.SEARCH_ENDPOINT + '/_search?q=' + encodeURIComponent(this.searchQuery) + '\\''\n      },\n      countLabels(unique_count, total_count) {\n        this.count_distinct_labels = unique_count;\n        this.count_labels = total_count;\n      },\n      saveFile() {\n        const elasticsearch_data = this.elasticsearch_data;\n        const blob = new Blob([JSON.stringify(elasticsearch_data)], {type: 'text/plain'});\n        const e = document.createEvent('MouseEvents'),\n          a = document.createElement('a');\n        a.download = \"data.json\";\n        a.href = window.URL.createObjectURL(blob);\n        a.dataset.downloadurl = ['text/json', a.download, a.href].join(':');\n        e.initEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        a.dispatchEvent(e);\n      },\n      updateConfidence (event) {\n        this.isBusy = !this.isBusy;\n        this.Confidence = event.target.value;\n        // TODO: move image processing to a separate component\n        if (this.mediaType === \"video\") {\n          // redraw markers on video timeline\n          this.player.markers.removeAll();\n        }\n        this.getCurlCommand();\n        this.fetchAssetData();\n      },\n      // updateMarkers updates markers in the video player and is called when someone clicks on a label button\n      updateMarkers (label) {\n        if (this.selectedLabel === label) {\n          // keep the canvas clear canvas if user clicked the label button a second consecutive time\n          this.selectedLabel = \"\";\n          return\n        }\n        this.selectedLabel = label;\n        let markers = [];\n        const es_data = this.elasticsearch_data;\n        es_data.forEach(function (record) {\n          if (record.Name === label) {\n            markers.push({'time': record.Timestamp/1000, 'text': record.Name, 'overlayText': record.Name})\n          }\n        });\n        // TODO: move image processing to a separate component\n        if (this.mediaType === \"video\") {\n          // redraw markers on video timeline\n          this.player.markers.removeAll();\n          this.player.markers.add(markers);\n        }\n      },\n      async fetchAssetData () {\n          let apiName = 'contentAnalysisElasticsearch';\n          let path = '/_search';\n          let apiParams = {\n            headers: {'Content-Type': 'application/json'},\n            queryStringParameters: {'q': this.searchQuery, 'default_operator': 'AND', 'size': 10000}\n          };\n          let response = await this.$Amplify.API.get(apiName, path, apiParams);\n          if (!response) {\n            this.showElasticSearchAlert = true\n          }\n          else {\n            let es_data = [];\n            let result = await response;\n            let data = result.hits.hits;\n            let dataLength = data.length;\n            if (dataLength === 0 && this.Confidence > 55)  {\n              this.lowerConfidence = true;\n              this.lowerConfidenceMessage = 'Try lowering confidence threshold'\n            }\n            else {\n              this.lowerConfidence = false;\n              for (let i = 0, len = dataLength; i < len; i++) {\n                es_data.push(data[i]._source)\n              }\n            }\n            this.elasticsearch_data = JSON.parse(JSON.stringify(es_data));\n            this.isBusy = false\n        }\n      },\n      chartData() {\n        let timeseries = new Map();\n        function saveTimestamp (millisecond) {\n          if (timeseries.has(millisecond)) {\n            timeseries.set(millisecond, {\"x\": millisecond, \"y\": timeseries.get(millisecond).y + 1})\n          } else {\n            timeseries.set(millisecond, {\"x\": millisecond, \"y\":1})\n          }\n        }\n        const es_data = this.elasticsearch_data;\n        es_data.forEach( function(record) {\n          // Define timestamp with millisecond resolution\n          const millisecond = Math.round(record.Timestamp);\n          if (this.selectedLabel) {\n            // If label is defined, then enumerate timestamps for that label\n            if (record.Name === this.selectedLabel) {\n              saveTimestamp(millisecond);\n            }\n          } else {\n            // No label has been selected, so enumerate timestamps for all label names.\n            saveTimestamp(millisecond);\n          }\n        }.bind(this));\n        //sort the timeseries map by its millisecond key\n        const ordered_timeseries = new Map([...timeseries.entries()].slice().sort((a, b) => a[0] - b[0]));\n        const chartTuples = Array.from(ordered_timeseries.values());\n        this.$store.commit('updateTimeseries', chartTuples);\n        this.$store.commit('updateSelectedLabel', this.selectedLabel);\n      },\n    }\n  }\n</script>\n"],"sourceRoot":"src/components"}]}